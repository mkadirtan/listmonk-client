/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ImportStatusData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportStatusData{}

// ImportStatusData struct for ImportStatusData
type ImportStatusData struct {
	Name *string `json:"name,omitempty"`
	Total *int32 `json:"total,omitempty"`
	Imported *int32 `json:"imported,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewImportStatusData instantiates a new ImportStatusData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportStatusData() *ImportStatusData {
	this := ImportStatusData{}
	return &this
}

// NewImportStatusDataWithDefaults instantiates a new ImportStatusData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportStatusDataWithDefaults() *ImportStatusData {
	this := ImportStatusData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImportStatusData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportStatusData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImportStatusData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImportStatusData) SetName(v string) {
	o.Name = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ImportStatusData) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportStatusData) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ImportStatusData) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ImportStatusData) SetTotal(v int32) {
	o.Total = &v
}

// GetImported returns the Imported field value if set, zero value otherwise.
func (o *ImportStatusData) GetImported() int32 {
	if o == nil || IsNil(o.Imported) {
		var ret int32
		return ret
	}
	return *o.Imported
}

// GetImportedOk returns a tuple with the Imported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportStatusData) GetImportedOk() (*int32, bool) {
	if o == nil || IsNil(o.Imported) {
		return nil, false
	}
	return o.Imported, true
}

// HasImported returns a boolean if a field has been set.
func (o *ImportStatusData) HasImported() bool {
	if o != nil && !IsNil(o.Imported) {
		return true
	}

	return false
}

// SetImported gets a reference to the given int32 and assigns it to the Imported field.
func (o *ImportStatusData) SetImported(v int32) {
	o.Imported = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ImportStatusData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportStatusData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ImportStatusData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ImportStatusData) SetStatus(v string) {
	o.Status = &v
}

func (o ImportStatusData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportStatusData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Imported) {
		toSerialize["imported"] = o.Imported
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableImportStatusData struct {
	value *ImportStatusData
	isSet bool
}

func (v NullableImportStatusData) Get() *ImportStatusData {
	return v.value
}

func (v *NullableImportStatusData) Set(val *ImportStatusData) {
	v.value = val
	v.isSet = true
}

func (v NullableImportStatusData) IsSet() bool {
	return v.isSet
}

func (v *NullableImportStatusData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportStatusData(val *ImportStatusData) *NullableImportStatusData {
	return &NullableImportStatusData{value: val, isSet: true}
}

func (v NullableImportStatusData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportStatusData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


