/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscriberProfileAttribs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriberProfileAttribs{}

// SubscriberProfileAttribs struct for SubscriberProfileAttribs
type SubscriberProfileAttribs struct {
	City *string `json:"city,omitempty"`
	Good *bool `json:"good,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewSubscriberProfileAttribs instantiates a new SubscriberProfileAttribs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriberProfileAttribs() *SubscriberProfileAttribs {
	this := SubscriberProfileAttribs{}
	return &this
}

// NewSubscriberProfileAttribsWithDefaults instantiates a new SubscriberProfileAttribs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriberProfileAttribsWithDefaults() *SubscriberProfileAttribs {
	this := SubscriberProfileAttribs{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *SubscriberProfileAttribs) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberProfileAttribs) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *SubscriberProfileAttribs) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *SubscriberProfileAttribs) SetCity(v string) {
	o.City = &v
}

// GetGood returns the Good field value if set, zero value otherwise.
func (o *SubscriberProfileAttribs) GetGood() bool {
	if o == nil || IsNil(o.Good) {
		var ret bool
		return ret
	}
	return *o.Good
}

// GetGoodOk returns a tuple with the Good field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberProfileAttribs) GetGoodOk() (*bool, bool) {
	if o == nil || IsNil(o.Good) {
		return nil, false
	}
	return o.Good, true
}

// HasGood returns a boolean if a field has been set.
func (o *SubscriberProfileAttribs) HasGood() bool {
	if o != nil && !IsNil(o.Good) {
		return true
	}

	return false
}

// SetGood gets a reference to the given bool and assigns it to the Good field.
func (o *SubscriberProfileAttribs) SetGood(v bool) {
	o.Good = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubscriberProfileAttribs) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberProfileAttribs) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubscriberProfileAttribs) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SubscriberProfileAttribs) SetType(v string) {
	o.Type = &v
}

func (o SubscriberProfileAttribs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriberProfileAttribs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Good) {
		toSerialize["good"] = o.Good
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSubscriberProfileAttribs struct {
	value *SubscriberProfileAttribs
	isSet bool
}

func (v NullableSubscriberProfileAttribs) Get() *SubscriberProfileAttribs {
	return v.value
}

func (v *NullableSubscriberProfileAttribs) Set(val *SubscriberProfileAttribs) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriberProfileAttribs) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriberProfileAttribs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriberProfileAttribs(val *SubscriberProfileAttribs) *NullableSubscriberProfileAttribs {
	return &NullableSubscriberProfileAttribs{value: val, isSet: true}
}

func (v NullableSubscriberProfileAttribs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriberProfileAttribs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


