/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscriberData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriberData{}

// SubscriberData struct for SubscriberData
type SubscriberData struct {
	Email *string `json:"email,omitempty"`
	Profile []SubscriberProfile `json:"profile,omitempty"`
	Subscriptions []Subscriptions `json:"subscriptions,omitempty"`
	CampaignViews []map[string]interface{} `json:"campaign_views,omitempty"`
	LinkClicks []map[string]interface{} `json:"link_clicks,omitempty"`
}

// NewSubscriberData instantiates a new SubscriberData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriberData() *SubscriberData {
	this := SubscriberData{}
	return &this
}

// NewSubscriberDataWithDefaults instantiates a new SubscriberData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriberDataWithDefaults() *SubscriberData {
	this := SubscriberData{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SubscriberData) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberData) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SubscriberData) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SubscriberData) SetEmail(v string) {
	o.Email = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *SubscriberData) GetProfile() []SubscriberProfile {
	if o == nil || IsNil(o.Profile) {
		var ret []SubscriberProfile
		return ret
	}
	return o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberData) GetProfileOk() ([]SubscriberProfile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *SubscriberData) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given []SubscriberProfile and assigns it to the Profile field.
func (o *SubscriberData) SetProfile(v []SubscriberProfile) {
	o.Profile = v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *SubscriberData) GetSubscriptions() []Subscriptions {
	if o == nil || IsNil(o.Subscriptions) {
		var ret []Subscriptions
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberData) GetSubscriptionsOk() ([]Subscriptions, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *SubscriberData) HasSubscriptions() bool {
	if o != nil && !IsNil(o.Subscriptions) {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given []Subscriptions and assigns it to the Subscriptions field.
func (o *SubscriberData) SetSubscriptions(v []Subscriptions) {
	o.Subscriptions = v
}

// GetCampaignViews returns the CampaignViews field value if set, zero value otherwise.
func (o *SubscriberData) GetCampaignViews() []map[string]interface{} {
	if o == nil || IsNil(o.CampaignViews) {
		var ret []map[string]interface{}
		return ret
	}
	return o.CampaignViews
}

// GetCampaignViewsOk returns a tuple with the CampaignViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberData) GetCampaignViewsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.CampaignViews) {
		return nil, false
	}
	return o.CampaignViews, true
}

// HasCampaignViews returns a boolean if a field has been set.
func (o *SubscriberData) HasCampaignViews() bool {
	if o != nil && !IsNil(o.CampaignViews) {
		return true
	}

	return false
}

// SetCampaignViews gets a reference to the given []map[string]interface{} and assigns it to the CampaignViews field.
func (o *SubscriberData) SetCampaignViews(v []map[string]interface{}) {
	o.CampaignViews = v
}

// GetLinkClicks returns the LinkClicks field value if set, zero value otherwise.
func (o *SubscriberData) GetLinkClicks() []map[string]interface{} {
	if o == nil || IsNil(o.LinkClicks) {
		var ret []map[string]interface{}
		return ret
	}
	return o.LinkClicks
}

// GetLinkClicksOk returns a tuple with the LinkClicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriberData) GetLinkClicksOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.LinkClicks) {
		return nil, false
	}
	return o.LinkClicks, true
}

// HasLinkClicks returns a boolean if a field has been set.
func (o *SubscriberData) HasLinkClicks() bool {
	if o != nil && !IsNil(o.LinkClicks) {
		return true
	}

	return false
}

// SetLinkClicks gets a reference to the given []map[string]interface{} and assigns it to the LinkClicks field.
func (o *SubscriberData) SetLinkClicks(v []map[string]interface{}) {
	o.LinkClicks = v
}

func (o SubscriberData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriberData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	if !IsNil(o.CampaignViews) {
		toSerialize["campaign_views"] = o.CampaignViews
	}
	if !IsNil(o.LinkClicks) {
		toSerialize["link_clicks"] = o.LinkClicks
	}
	return toSerialize, nil
}

type NullableSubscriberData struct {
	value *SubscriberData
	isSet bool
}

func (v NullableSubscriberData) Get() *SubscriberData {
	return v.value
}

func (v *NullableSubscriberData) Set(val *SubscriberData) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriberData) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriberData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriberData(val *SubscriberData) *NullableSubscriberData {
	return &NullableSubscriberData{value: val, isSet: true}
}

func (v NullableSubscriberData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriberData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


