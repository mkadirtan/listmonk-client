/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HandlePublicSubscriptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlePublicSubscriptionRequest{}

// HandlePublicSubscriptionRequest struct for HandlePublicSubscriptionRequest
type HandlePublicSubscriptionRequest struct {
	Name *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
	ListUuids []string `json:"list_uuids,omitempty"`
}

// NewHandlePublicSubscriptionRequest instantiates a new HandlePublicSubscriptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlePublicSubscriptionRequest() *HandlePublicSubscriptionRequest {
	this := HandlePublicSubscriptionRequest{}
	return &this
}

// NewHandlePublicSubscriptionRequestWithDefaults instantiates a new HandlePublicSubscriptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlePublicSubscriptionRequestWithDefaults() *HandlePublicSubscriptionRequest {
	this := HandlePublicSubscriptionRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HandlePublicSubscriptionRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlePublicSubscriptionRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HandlePublicSubscriptionRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HandlePublicSubscriptionRequest) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *HandlePublicSubscriptionRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlePublicSubscriptionRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *HandlePublicSubscriptionRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *HandlePublicSubscriptionRequest) SetEmail(v string) {
	o.Email = &v
}

// GetListUuids returns the ListUuids field value if set, zero value otherwise.
func (o *HandlePublicSubscriptionRequest) GetListUuids() []string {
	if o == nil || IsNil(o.ListUuids) {
		var ret []string
		return ret
	}
	return o.ListUuids
}

// GetListUuidsOk returns a tuple with the ListUuids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandlePublicSubscriptionRequest) GetListUuidsOk() ([]string, bool) {
	if o == nil || IsNil(o.ListUuids) {
		return nil, false
	}
	return o.ListUuids, true
}

// HasListUuids returns a boolean if a field has been set.
func (o *HandlePublicSubscriptionRequest) HasListUuids() bool {
	if o != nil && !IsNil(o.ListUuids) {
		return true
	}

	return false
}

// SetListUuids gets a reference to the given []string and assigns it to the ListUuids field.
func (o *HandlePublicSubscriptionRequest) SetListUuids(v []string) {
	o.ListUuids = v
}

func (o HandlePublicSubscriptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlePublicSubscriptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ListUuids) {
		toSerialize["list_uuids"] = o.ListUuids
	}
	return toSerialize, nil
}

type NullableHandlePublicSubscriptionRequest struct {
	value *HandlePublicSubscriptionRequest
	isSet bool
}

func (v NullableHandlePublicSubscriptionRequest) Get() *HandlePublicSubscriptionRequest {
	return v.value
}

func (v *NullableHandlePublicSubscriptionRequest) Set(val *HandlePublicSubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlePublicSubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlePublicSubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlePublicSubscriptionRequest(val *HandlePublicSubscriptionRequest) *NullableHandlePublicSubscriptionRequest {
	return &NullableHandlePublicSubscriptionRequest{value: val, isSet: true}
}

func (v NullableHandlePublicSubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlePublicSubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


