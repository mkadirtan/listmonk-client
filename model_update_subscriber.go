/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateSubscriber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubscriber{}

// UpdateSubscriber struct for UpdateSubscriber
type UpdateSubscriber struct {
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *string `json:"status,omitempty"`
	Lists []int32 `json:"lists,omitempty"`
	ListUuids []string `json:"list_uuids,omitempty"`
	PreconfirmSubscriptions *bool `json:"preconfirm_subscriptions,omitempty"`
	Attribs *NewSubscriberAttribs `json:"attribs,omitempty"`
}

// NewUpdateSubscriber instantiates a new UpdateSubscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSubscriber() *UpdateSubscriber {
	this := UpdateSubscriber{}
	return &this
}

// NewUpdateSubscriberWithDefaults instantiates a new UpdateSubscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubscriberWithDefaults() *UpdateSubscriber {
	this := UpdateSubscriber{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateSubscriber) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriber) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateSubscriber) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateSubscriber) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateSubscriber) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriber) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateSubscriber) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateSubscriber) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateSubscriber) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriber) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateSubscriber) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UpdateSubscriber) SetStatus(v string) {
	o.Status = &v
}

// GetLists returns the Lists field value if set, zero value otherwise.
func (o *UpdateSubscriber) GetLists() []int32 {
	if o == nil || IsNil(o.Lists) {
		var ret []int32
		return ret
	}
	return o.Lists
}

// GetListsOk returns a tuple with the Lists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriber) GetListsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Lists) {
		return nil, false
	}
	return o.Lists, true
}

// HasLists returns a boolean if a field has been set.
func (o *UpdateSubscriber) HasLists() bool {
	if o != nil && !IsNil(o.Lists) {
		return true
	}

	return false
}

// SetLists gets a reference to the given []int32 and assigns it to the Lists field.
func (o *UpdateSubscriber) SetLists(v []int32) {
	o.Lists = v
}

// GetListUuids returns the ListUuids field value if set, zero value otherwise.
func (o *UpdateSubscriber) GetListUuids() []string {
	if o == nil || IsNil(o.ListUuids) {
		var ret []string
		return ret
	}
	return o.ListUuids
}

// GetListUuidsOk returns a tuple with the ListUuids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriber) GetListUuidsOk() ([]string, bool) {
	if o == nil || IsNil(o.ListUuids) {
		return nil, false
	}
	return o.ListUuids, true
}

// HasListUuids returns a boolean if a field has been set.
func (o *UpdateSubscriber) HasListUuids() bool {
	if o != nil && !IsNil(o.ListUuids) {
		return true
	}

	return false
}

// SetListUuids gets a reference to the given []string and assigns it to the ListUuids field.
func (o *UpdateSubscriber) SetListUuids(v []string) {
	o.ListUuids = v
}

// GetPreconfirmSubscriptions returns the PreconfirmSubscriptions field value if set, zero value otherwise.
func (o *UpdateSubscriber) GetPreconfirmSubscriptions() bool {
	if o == nil || IsNil(o.PreconfirmSubscriptions) {
		var ret bool
		return ret
	}
	return *o.PreconfirmSubscriptions
}

// GetPreconfirmSubscriptionsOk returns a tuple with the PreconfirmSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriber) GetPreconfirmSubscriptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.PreconfirmSubscriptions) {
		return nil, false
	}
	return o.PreconfirmSubscriptions, true
}

// HasPreconfirmSubscriptions returns a boolean if a field has been set.
func (o *UpdateSubscriber) HasPreconfirmSubscriptions() bool {
	if o != nil && !IsNil(o.PreconfirmSubscriptions) {
		return true
	}

	return false
}

// SetPreconfirmSubscriptions gets a reference to the given bool and assigns it to the PreconfirmSubscriptions field.
func (o *UpdateSubscriber) SetPreconfirmSubscriptions(v bool) {
	o.PreconfirmSubscriptions = &v
}

// GetAttribs returns the Attribs field value if set, zero value otherwise.
func (o *UpdateSubscriber) GetAttribs() NewSubscriberAttribs {
	if o == nil || IsNil(o.Attribs) {
		var ret NewSubscriberAttribs
		return ret
	}
	return *o.Attribs
}

// GetAttribsOk returns a tuple with the Attribs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriber) GetAttribsOk() (*NewSubscriberAttribs, bool) {
	if o == nil || IsNil(o.Attribs) {
		return nil, false
	}
	return o.Attribs, true
}

// HasAttribs returns a boolean if a field has been set.
func (o *UpdateSubscriber) HasAttribs() bool {
	if o != nil && !IsNil(o.Attribs) {
		return true
	}

	return false
}

// SetAttribs gets a reference to the given NewSubscriberAttribs and assigns it to the Attribs field.
func (o *UpdateSubscriber) SetAttribs(v NewSubscriberAttribs) {
	o.Attribs = &v
}

func (o UpdateSubscriber) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubscriber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Lists) {
		toSerialize["lists"] = o.Lists
	}
	if !IsNil(o.ListUuids) {
		toSerialize["list_uuids"] = o.ListUuids
	}
	if !IsNil(o.PreconfirmSubscriptions) {
		toSerialize["preconfirm_subscriptions"] = o.PreconfirmSubscriptions
	}
	if !IsNil(o.Attribs) {
		toSerialize["attribs"] = o.Attribs
	}
	return toSerialize, nil
}

type NullableUpdateSubscriber struct {
	value *UpdateSubscriber
	isSet bool
}

func (v NullableUpdateSubscriber) Get() *UpdateSubscriber {
	return v.value
}

func (v *NullableUpdateSubscriber) Set(val *UpdateSubscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubscriber(val *UpdateSubscriber) *NullableUpdateSubscriber {
	return &NullableUpdateSubscriber{value: val, isSet: true}
}

func (v NullableUpdateSubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


