/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SMTPSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMTPSettings{}

// SMTPSettings struct for SMTPSettings
type SMTPSettings struct {
	Uuid *string `json:"uuid,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Host *string `json:"host,omitempty"`
	HelloHostname *string `json:"hello_hostname,omitempty"`
	Port *int32 `json:"port,omitempty"`
	AuthProtocol *string `json:"auth_protocol,omitempty"`
	Username *string `json:"username,omitempty"`
	EmailHeaders []map[string]interface{} `json:"email_headers,omitempty"`
	MaxConns *int32 `json:"max_conns,omitempty"`
	MaxMsgRetries *int32 `json:"max_msg_retries,omitempty"`
	IdleTimeout *string `json:"idle_timeout,omitempty"`
	WaitTimeout *string `json:"wait_timeout,omitempty"`
	TlsType *string `json:"tls_type,omitempty"`
	TlsSkipVerify *bool `json:"tls_skip_verify,omitempty"`
}

// NewSMTPSettings instantiates a new SMTPSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMTPSettings() *SMTPSettings {
	this := SMTPSettings{}
	return &this
}

// NewSMTPSettingsWithDefaults instantiates a new SMTPSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMTPSettingsWithDefaults() *SMTPSettings {
	this := SMTPSettings{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SMTPSettings) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SMTPSettings) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SMTPSettings) SetUuid(v string) {
	o.Uuid = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SMTPSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SMTPSettings) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SMTPSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *SMTPSettings) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *SMTPSettings) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *SMTPSettings) SetHost(v string) {
	o.Host = &v
}

// GetHelloHostname returns the HelloHostname field value if set, zero value otherwise.
func (o *SMTPSettings) GetHelloHostname() string {
	if o == nil || IsNil(o.HelloHostname) {
		var ret string
		return ret
	}
	return *o.HelloHostname
}

// GetHelloHostnameOk returns a tuple with the HelloHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetHelloHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.HelloHostname) {
		return nil, false
	}
	return o.HelloHostname, true
}

// HasHelloHostname returns a boolean if a field has been set.
func (o *SMTPSettings) HasHelloHostname() bool {
	if o != nil && !IsNil(o.HelloHostname) {
		return true
	}

	return false
}

// SetHelloHostname gets a reference to the given string and assigns it to the HelloHostname field.
func (o *SMTPSettings) SetHelloHostname(v string) {
	o.HelloHostname = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SMTPSettings) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SMTPSettings) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *SMTPSettings) SetPort(v int32) {
	o.Port = &v
}

// GetAuthProtocol returns the AuthProtocol field value if set, zero value otherwise.
func (o *SMTPSettings) GetAuthProtocol() string {
	if o == nil || IsNil(o.AuthProtocol) {
		var ret string
		return ret
	}
	return *o.AuthProtocol
}

// GetAuthProtocolOk returns a tuple with the AuthProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetAuthProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.AuthProtocol) {
		return nil, false
	}
	return o.AuthProtocol, true
}

// HasAuthProtocol returns a boolean if a field has been set.
func (o *SMTPSettings) HasAuthProtocol() bool {
	if o != nil && !IsNil(o.AuthProtocol) {
		return true
	}

	return false
}

// SetAuthProtocol gets a reference to the given string and assigns it to the AuthProtocol field.
func (o *SMTPSettings) SetAuthProtocol(v string) {
	o.AuthProtocol = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SMTPSettings) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SMTPSettings) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SMTPSettings) SetUsername(v string) {
	o.Username = &v
}

// GetEmailHeaders returns the EmailHeaders field value if set, zero value otherwise.
func (o *SMTPSettings) GetEmailHeaders() []map[string]interface{} {
	if o == nil || IsNil(o.EmailHeaders) {
		var ret []map[string]interface{}
		return ret
	}
	return o.EmailHeaders
}

// GetEmailHeadersOk returns a tuple with the EmailHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetEmailHeadersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.EmailHeaders) {
		return nil, false
	}
	return o.EmailHeaders, true
}

// HasEmailHeaders returns a boolean if a field has been set.
func (o *SMTPSettings) HasEmailHeaders() bool {
	if o != nil && !IsNil(o.EmailHeaders) {
		return true
	}

	return false
}

// SetEmailHeaders gets a reference to the given []map[string]interface{} and assigns it to the EmailHeaders field.
func (o *SMTPSettings) SetEmailHeaders(v []map[string]interface{}) {
	o.EmailHeaders = v
}

// GetMaxConns returns the MaxConns field value if set, zero value otherwise.
func (o *SMTPSettings) GetMaxConns() int32 {
	if o == nil || IsNil(o.MaxConns) {
		var ret int32
		return ret
	}
	return *o.MaxConns
}

// GetMaxConnsOk returns a tuple with the MaxConns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetMaxConnsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxConns) {
		return nil, false
	}
	return o.MaxConns, true
}

// HasMaxConns returns a boolean if a field has been set.
func (o *SMTPSettings) HasMaxConns() bool {
	if o != nil && !IsNil(o.MaxConns) {
		return true
	}

	return false
}

// SetMaxConns gets a reference to the given int32 and assigns it to the MaxConns field.
func (o *SMTPSettings) SetMaxConns(v int32) {
	o.MaxConns = &v
}

// GetMaxMsgRetries returns the MaxMsgRetries field value if set, zero value otherwise.
func (o *SMTPSettings) GetMaxMsgRetries() int32 {
	if o == nil || IsNil(o.MaxMsgRetries) {
		var ret int32
		return ret
	}
	return *o.MaxMsgRetries
}

// GetMaxMsgRetriesOk returns a tuple with the MaxMsgRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetMaxMsgRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMsgRetries) {
		return nil, false
	}
	return o.MaxMsgRetries, true
}

// HasMaxMsgRetries returns a boolean if a field has been set.
func (o *SMTPSettings) HasMaxMsgRetries() bool {
	if o != nil && !IsNil(o.MaxMsgRetries) {
		return true
	}

	return false
}

// SetMaxMsgRetries gets a reference to the given int32 and assigns it to the MaxMsgRetries field.
func (o *SMTPSettings) SetMaxMsgRetries(v int32) {
	o.MaxMsgRetries = &v
}

// GetIdleTimeout returns the IdleTimeout field value if set, zero value otherwise.
func (o *SMTPSettings) GetIdleTimeout() string {
	if o == nil || IsNil(o.IdleTimeout) {
		var ret string
		return ret
	}
	return *o.IdleTimeout
}

// GetIdleTimeoutOk returns a tuple with the IdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetIdleTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.IdleTimeout) {
		return nil, false
	}
	return o.IdleTimeout, true
}

// HasIdleTimeout returns a boolean if a field has been set.
func (o *SMTPSettings) HasIdleTimeout() bool {
	if o != nil && !IsNil(o.IdleTimeout) {
		return true
	}

	return false
}

// SetIdleTimeout gets a reference to the given string and assigns it to the IdleTimeout field.
func (o *SMTPSettings) SetIdleTimeout(v string) {
	o.IdleTimeout = &v
}

// GetWaitTimeout returns the WaitTimeout field value if set, zero value otherwise.
func (o *SMTPSettings) GetWaitTimeout() string {
	if o == nil || IsNil(o.WaitTimeout) {
		var ret string
		return ret
	}
	return *o.WaitTimeout
}

// GetWaitTimeoutOk returns a tuple with the WaitTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetWaitTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.WaitTimeout) {
		return nil, false
	}
	return o.WaitTimeout, true
}

// HasWaitTimeout returns a boolean if a field has been set.
func (o *SMTPSettings) HasWaitTimeout() bool {
	if o != nil && !IsNil(o.WaitTimeout) {
		return true
	}

	return false
}

// SetWaitTimeout gets a reference to the given string and assigns it to the WaitTimeout field.
func (o *SMTPSettings) SetWaitTimeout(v string) {
	o.WaitTimeout = &v
}

// GetTlsType returns the TlsType field value if set, zero value otherwise.
func (o *SMTPSettings) GetTlsType() string {
	if o == nil || IsNil(o.TlsType) {
		var ret string
		return ret
	}
	return *o.TlsType
}

// GetTlsTypeOk returns a tuple with the TlsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetTlsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TlsType) {
		return nil, false
	}
	return o.TlsType, true
}

// HasTlsType returns a boolean if a field has been set.
func (o *SMTPSettings) HasTlsType() bool {
	if o != nil && !IsNil(o.TlsType) {
		return true
	}

	return false
}

// SetTlsType gets a reference to the given string and assigns it to the TlsType field.
func (o *SMTPSettings) SetTlsType(v string) {
	o.TlsType = &v
}

// GetTlsSkipVerify returns the TlsSkipVerify field value if set, zero value otherwise.
func (o *SMTPSettings) GetTlsSkipVerify() bool {
	if o == nil || IsNil(o.TlsSkipVerify) {
		var ret bool
		return ret
	}
	return *o.TlsSkipVerify
}

// GetTlsSkipVerifyOk returns a tuple with the TlsSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPSettings) GetTlsSkipVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsSkipVerify) {
		return nil, false
	}
	return o.TlsSkipVerify, true
}

// HasTlsSkipVerify returns a boolean if a field has been set.
func (o *SMTPSettings) HasTlsSkipVerify() bool {
	if o != nil && !IsNil(o.TlsSkipVerify) {
		return true
	}

	return false
}

// SetTlsSkipVerify gets a reference to the given bool and assigns it to the TlsSkipVerify field.
func (o *SMTPSettings) SetTlsSkipVerify(v bool) {
	o.TlsSkipVerify = &v
}

func (o SMTPSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMTPSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.HelloHostname) {
		toSerialize["hello_hostname"] = o.HelloHostname
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.AuthProtocol) {
		toSerialize["auth_protocol"] = o.AuthProtocol
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.EmailHeaders) {
		toSerialize["email_headers"] = o.EmailHeaders
	}
	if !IsNil(o.MaxConns) {
		toSerialize["max_conns"] = o.MaxConns
	}
	if !IsNil(o.MaxMsgRetries) {
		toSerialize["max_msg_retries"] = o.MaxMsgRetries
	}
	if !IsNil(o.IdleTimeout) {
		toSerialize["idle_timeout"] = o.IdleTimeout
	}
	if !IsNil(o.WaitTimeout) {
		toSerialize["wait_timeout"] = o.WaitTimeout
	}
	if !IsNil(o.TlsType) {
		toSerialize["tls_type"] = o.TlsType
	}
	if !IsNil(o.TlsSkipVerify) {
		toSerialize["tls_skip_verify"] = o.TlsSkipVerify
	}
	return toSerialize, nil
}

type NullableSMTPSettings struct {
	value *SMTPSettings
	isSet bool
}

func (v NullableSMTPSettings) Get() *SMTPSettings {
	return v.value
}

func (v *NullableSMTPSettings) Set(val *SMTPSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSMTPSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSMTPSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMTPSettings(val *SMTPSettings) *NullableSMTPSettings {
	return &NullableSMTPSettings{value: val, isSet: true}
}

func (v NullableSMTPSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMTPSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


