/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MailBoxBounces type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailBoxBounces{}

// MailBoxBounces struct for MailBoxBounces
type MailBoxBounces struct {
	Uuid *string `json:"uuid,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Type *string `json:"type,omitempty"`
	Host *string `json:"host,omitempty"`
	Port *int32 `json:"port,omitempty"`
	AuthProtocol *string `json:"auth_protocol,omitempty"`
	ReturnPath *string `json:"return_path,omitempty"`
	Username *string `json:"username,omitempty"`
	TlsEnabled *bool `json:"tls_enabled,omitempty"`
	TlsSkipVerify *bool `json:"tls_skip_verify,omitempty"`
	ScanInterval *string `json:"scan_interval,omitempty"`
}

// NewMailBoxBounces instantiates a new MailBoxBounces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailBoxBounces() *MailBoxBounces {
	this := MailBoxBounces{}
	return &this
}

// NewMailBoxBouncesWithDefaults instantiates a new MailBoxBounces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailBoxBouncesWithDefaults() *MailBoxBounces {
	this := MailBoxBounces{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MailBoxBounces) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MailBoxBounces) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MailBoxBounces) SetUuid(v string) {
	o.Uuid = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MailBoxBounces) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MailBoxBounces) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MailBoxBounces) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MailBoxBounces) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MailBoxBounces) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MailBoxBounces) SetType(v string) {
	o.Type = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *MailBoxBounces) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *MailBoxBounces) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *MailBoxBounces) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *MailBoxBounces) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *MailBoxBounces) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *MailBoxBounces) SetPort(v int32) {
	o.Port = &v
}

// GetAuthProtocol returns the AuthProtocol field value if set, zero value otherwise.
func (o *MailBoxBounces) GetAuthProtocol() string {
	if o == nil || IsNil(o.AuthProtocol) {
		var ret string
		return ret
	}
	return *o.AuthProtocol
}

// GetAuthProtocolOk returns a tuple with the AuthProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetAuthProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.AuthProtocol) {
		return nil, false
	}
	return o.AuthProtocol, true
}

// HasAuthProtocol returns a boolean if a field has been set.
func (o *MailBoxBounces) HasAuthProtocol() bool {
	if o != nil && !IsNil(o.AuthProtocol) {
		return true
	}

	return false
}

// SetAuthProtocol gets a reference to the given string and assigns it to the AuthProtocol field.
func (o *MailBoxBounces) SetAuthProtocol(v string) {
	o.AuthProtocol = &v
}

// GetReturnPath returns the ReturnPath field value if set, zero value otherwise.
func (o *MailBoxBounces) GetReturnPath() string {
	if o == nil || IsNil(o.ReturnPath) {
		var ret string
		return ret
	}
	return *o.ReturnPath
}

// GetReturnPathOk returns a tuple with the ReturnPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetReturnPathOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnPath) {
		return nil, false
	}
	return o.ReturnPath, true
}

// HasReturnPath returns a boolean if a field has been set.
func (o *MailBoxBounces) HasReturnPath() bool {
	if o != nil && !IsNil(o.ReturnPath) {
		return true
	}

	return false
}

// SetReturnPath gets a reference to the given string and assigns it to the ReturnPath field.
func (o *MailBoxBounces) SetReturnPath(v string) {
	o.ReturnPath = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MailBoxBounces) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MailBoxBounces) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MailBoxBounces) SetUsername(v string) {
	o.Username = &v
}

// GetTlsEnabled returns the TlsEnabled field value if set, zero value otherwise.
func (o *MailBoxBounces) GetTlsEnabled() bool {
	if o == nil || IsNil(o.TlsEnabled) {
		var ret bool
		return ret
	}
	return *o.TlsEnabled
}

// GetTlsEnabledOk returns a tuple with the TlsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetTlsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsEnabled) {
		return nil, false
	}
	return o.TlsEnabled, true
}

// HasTlsEnabled returns a boolean if a field has been set.
func (o *MailBoxBounces) HasTlsEnabled() bool {
	if o != nil && !IsNil(o.TlsEnabled) {
		return true
	}

	return false
}

// SetTlsEnabled gets a reference to the given bool and assigns it to the TlsEnabled field.
func (o *MailBoxBounces) SetTlsEnabled(v bool) {
	o.TlsEnabled = &v
}

// GetTlsSkipVerify returns the TlsSkipVerify field value if set, zero value otherwise.
func (o *MailBoxBounces) GetTlsSkipVerify() bool {
	if o == nil || IsNil(o.TlsSkipVerify) {
		var ret bool
		return ret
	}
	return *o.TlsSkipVerify
}

// GetTlsSkipVerifyOk returns a tuple with the TlsSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetTlsSkipVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsSkipVerify) {
		return nil, false
	}
	return o.TlsSkipVerify, true
}

// HasTlsSkipVerify returns a boolean if a field has been set.
func (o *MailBoxBounces) HasTlsSkipVerify() bool {
	if o != nil && !IsNil(o.TlsSkipVerify) {
		return true
	}

	return false
}

// SetTlsSkipVerify gets a reference to the given bool and assigns it to the TlsSkipVerify field.
func (o *MailBoxBounces) SetTlsSkipVerify(v bool) {
	o.TlsSkipVerify = &v
}

// GetScanInterval returns the ScanInterval field value if set, zero value otherwise.
func (o *MailBoxBounces) GetScanInterval() string {
	if o == nil || IsNil(o.ScanInterval) {
		var ret string
		return ret
	}
	return *o.ScanInterval
}

// GetScanIntervalOk returns a tuple with the ScanInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailBoxBounces) GetScanIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.ScanInterval) {
		return nil, false
	}
	return o.ScanInterval, true
}

// HasScanInterval returns a boolean if a field has been set.
func (o *MailBoxBounces) HasScanInterval() bool {
	if o != nil && !IsNil(o.ScanInterval) {
		return true
	}

	return false
}

// SetScanInterval gets a reference to the given string and assigns it to the ScanInterval field.
func (o *MailBoxBounces) SetScanInterval(v string) {
	o.ScanInterval = &v
}

func (o MailBoxBounces) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailBoxBounces) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.AuthProtocol) {
		toSerialize["auth_protocol"] = o.AuthProtocol
	}
	if !IsNil(o.ReturnPath) {
		toSerialize["return_path"] = o.ReturnPath
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.TlsEnabled) {
		toSerialize["tls_enabled"] = o.TlsEnabled
	}
	if !IsNil(o.TlsSkipVerify) {
		toSerialize["tls_skip_verify"] = o.TlsSkipVerify
	}
	if !IsNil(o.ScanInterval) {
		toSerialize["scan_interval"] = o.ScanInterval
	}
	return toSerialize, nil
}

type NullableMailBoxBounces struct {
	value *MailBoxBounces
	isSet bool
}

func (v NullableMailBoxBounces) Get() *MailBoxBounces {
	return v.value
}

func (v *NullableMailBoxBounces) Set(val *MailBoxBounces) {
	v.value = val
	v.isSet = true
}

func (v NullableMailBoxBounces) IsSet() bool {
	return v.isSet
}

func (v *NullableMailBoxBounces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailBoxBounces(val *MailBoxBounces) *NullableMailBoxBounces {
	return &NullableMailBoxBounces{value: val, isSet: true}
}

func (v NullableMailBoxBounces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailBoxBounces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


