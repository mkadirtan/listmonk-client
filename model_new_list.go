/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NewList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewList{}

// NewList struct for NewList
type NewList struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Optin *string `json:"optin,omitempty"`
	Tags []string `json:"tags,omitempty"`
}

// NewNewList instantiates a new NewList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewList() *NewList {
	this := NewList{}
	return &this
}

// NewNewListWithDefaults instantiates a new NewList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewListWithDefaults() *NewList {
	this := NewList{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NewList) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewList) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NewList) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NewList) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NewList) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewList) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NewList) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NewList) SetType(v string) {
	o.Type = &v
}

// GetOptin returns the Optin field value if set, zero value otherwise.
func (o *NewList) GetOptin() string {
	if o == nil || IsNil(o.Optin) {
		var ret string
		return ret
	}
	return *o.Optin
}

// GetOptinOk returns a tuple with the Optin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewList) GetOptinOk() (*string, bool) {
	if o == nil || IsNil(o.Optin) {
		return nil, false
	}
	return o.Optin, true
}

// HasOptin returns a boolean if a field has been set.
func (o *NewList) HasOptin() bool {
	if o != nil && !IsNil(o.Optin) {
		return true
	}

	return false
}

// SetOptin gets a reference to the given string and assigns it to the Optin field.
func (o *NewList) SetOptin(v string) {
	o.Optin = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *NewList) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewList) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *NewList) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *NewList) SetTags(v []string) {
	o.Tags = v
}

func (o NewList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Optin) {
		toSerialize["optin"] = o.Optin
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableNewList struct {
	value *NewList
	isSet bool
}

func (v NullableNewList) Get() *NewList {
	return v.value
}

func (v *NullableNewList) Set(val *NewList) {
	v.value = val
	v.isSet = true
}

func (v NullableNewList) IsSet() bool {
	return v.isSet
}

func (v *NullableNewList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewList(val *NewList) *NullableNewList {
	return &NullableNewList{value: val, isSet: true}
}

func (v NullableNewList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


