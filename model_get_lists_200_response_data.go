/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetLists200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLists200ResponseData{}

// GetLists200ResponseData struct for GetLists200ResponseData
type GetLists200ResponseData struct {
	Results []List `json:"results,omitempty"`
	Total *int32 `json:"total,omitempty"`
	PerPage *int32 `json:"per_page,omitempty"`
	Page *int32 `json:"page,omitempty"`
}

// NewGetLists200ResponseData instantiates a new GetLists200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLists200ResponseData() *GetLists200ResponseData {
	this := GetLists200ResponseData{}
	return &this
}

// NewGetLists200ResponseDataWithDefaults instantiates a new GetLists200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLists200ResponseDataWithDefaults() *GetLists200ResponseData {
	this := GetLists200ResponseData{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *GetLists200ResponseData) GetResults() []List {
	if o == nil || IsNil(o.Results) {
		var ret []List
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLists200ResponseData) GetResultsOk() ([]List, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *GetLists200ResponseData) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []List and assigns it to the Results field.
func (o *GetLists200ResponseData) SetResults(v []List) {
	o.Results = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *GetLists200ResponseData) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLists200ResponseData) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *GetLists200ResponseData) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *GetLists200ResponseData) SetTotal(v int32) {
	o.Total = &v
}

// GetPerPage returns the PerPage field value if set, zero value otherwise.
func (o *GetLists200ResponseData) GetPerPage() int32 {
	if o == nil || IsNil(o.PerPage) {
		var ret int32
		return ret
	}
	return *o.PerPage
}

// GetPerPageOk returns a tuple with the PerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLists200ResponseData) GetPerPageOk() (*int32, bool) {
	if o == nil || IsNil(o.PerPage) {
		return nil, false
	}
	return o.PerPage, true
}

// HasPerPage returns a boolean if a field has been set.
func (o *GetLists200ResponseData) HasPerPage() bool {
	if o != nil && !IsNil(o.PerPage) {
		return true
	}

	return false
}

// SetPerPage gets a reference to the given int32 and assigns it to the PerPage field.
func (o *GetLists200ResponseData) SetPerPage(v int32) {
	o.PerPage = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *GetLists200ResponseData) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLists200ResponseData) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *GetLists200ResponseData) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *GetLists200ResponseData) SetPage(v int32) {
	o.Page = &v
}

func (o GetLists200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLists200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.PerPage) {
		toSerialize["per_page"] = o.PerPage
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	return toSerialize, nil
}

type NullableGetLists200ResponseData struct {
	value *GetLists200ResponseData
	isSet bool
}

func (v NullableGetLists200ResponseData) Get() *GetLists200ResponseData {
	return v.value
}

func (v *NullableGetLists200ResponseData) Set(val *GetLists200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLists200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLists200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLists200ResponseData(val *GetLists200ResponseData) *NullableGetLists200ResponseData {
	return &NullableGetLists200ResponseData{value: val, isSet: true}
}

func (v NullableGetLists200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLists200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


