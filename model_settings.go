/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Settings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Settings{}

// Settings struct for Settings
type Settings struct {
	AppSiteName *string `json:"app.site_name,omitempty"`
	AppRootUrl *string `json:"app.root_url,omitempty"`
	AppLogoUrl *string `json:"app.logo_url,omitempty"`
	AppFaviconUrl *string `json:"app.favicon_url,omitempty"`
	AppFromEmail *string `json:"app.from_email,omitempty"`
	AppNotifyEmails []string `json:"app.notify_emails,omitempty"`
	AppEnablePublicSubscriptionPage *bool `json:"app.enable_public_subscription_page,omitempty"`
	AppEnablePublicArchive *bool `json:"app.enable_public_archive,omitempty"`
	AppSendOptinConfirmation *bool `json:"app.send_optin_confirmation,omitempty"`
	AppCheckUpdates *bool `json:"app.check_updates,omitempty"`
	AppLang *string `json:"app.lang,omitempty"`
	AppBatchSize *int32 `json:"app.batch_size,omitempty"`
	AppConcurrency *int32 `json:"app.concurrency,omitempty"`
	AppMaxSendErrors *int32 `json:"app.max_send_errors,omitempty"`
	AppMessageRate *int32 `json:"app.message_rate,omitempty"`
	AppMessageSlidingWindow *bool `json:"app.message_sliding_window,omitempty"`
	AppMessageSlidingWindowDuration *string `json:"app.message_sliding_window_duration,omitempty"`
	AppMessageSlidingWindowRate *int32 `json:"app.message_sliding_window_rate,omitempty"`
	PrivacyIndividualTracking *bool `json:"privacy.individual_tracking,omitempty"`
	PrivacyUnsubscribeHeader *bool `json:"privacy.unsubscribe_header,omitempty"`
	PrivacyAllowBlocklist *bool `json:"privacy.allow_blocklist,omitempty"`
	PrivacyAllowPreferences *bool `json:"privacy.allow_preferences,omitempty"`
	PrivacyAllowExport *bool `json:"privacy.allow_export,omitempty"`
	PrivacyAllowWipe *bool `json:"privacy.allow_wipe,omitempty"`
	PrivacyExportable []string `json:"privacy.exportable,omitempty"`
	PrivacyDomainBlocklist []map[string]interface{} `json:"privacy.domain_blocklist,omitempty"`
	UploadProvider *string `json:"upload.provider,omitempty"`
	UploadFilesystemUploadPath *string `json:"upload.filesystem.upload_path,omitempty"`
	UploadFilesystemUploadUri *string `json:"upload.filesystem.upload_uri,omitempty"`
	UploadS3Url *string `json:"upload.s3.url,omitempty"`
	UploadS3PublicUrl *string `json:"upload.s3.public_url,omitempty"`
	UploadS3AwsAccessKeyId *string `json:"upload.s3.aws_access_key_id,omitempty"`
	UploadS3AwsDefaultRegion *string `json:"upload.s3.aws_default_region,omitempty"`
	UploadS3Bucket *string `json:"upload.s3.bucket,omitempty"`
	UploadS3BucketDomain *string `json:"upload.s3.bucket_domain,omitempty"`
	UploadS3BucketPath *string `json:"upload.s3.bucket_path,omitempty"`
	UploadS3BucketType *string `json:"upload.s3.bucket_type,omitempty"`
	UploadS3Expiry *string `json:"upload.s3.expiry,omitempty"`
	Smtp []SMTPSettings `json:"smtp,omitempty"`
	Messengers []map[string]interface{} `json:"messengers,omitempty"`
	BounceEnabled *bool `json:"bounce.enabled,omitempty"`
	BounceWebhooksEnabled *bool `json:"bounce.webhooks_enabled,omitempty"`
	BounceCount *int32 `json:"bounce.count,omitempty"`
	BounceAction *string `json:"bounce.action,omitempty"`
	BounceSesEnabled *bool `json:"bounce.ses_enabled,omitempty"`
	BounceSendgridEnabled *bool `json:"bounce.sendgrid_enabled,omitempty"`
	BounceSendgridKey *string `json:"bounce.sendgrid_key,omitempty"`
	BounceMailboxes []MailBoxBounces `json:"bounce.mailboxes,omitempty"`
	AppearanceAdminCustomCss *string `json:"appearance.admin.custom_css,omitempty"`
	AppearanceAdminCustomJs *string `json:"appearance.admin.custom_js,omitempty"`
	AppearancePublicCustomCss *string `json:"appearance.public.custom_css,omitempty"`
	AppearancePublicCustomJs *string `json:"appearance.public.custom_js,omitempty"`
}

// NewSettings instantiates a new Settings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettings() *Settings {
	this := Settings{}
	return &this
}

// NewSettingsWithDefaults instantiates a new Settings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsWithDefaults() *Settings {
	this := Settings{}
	return &this
}

// GetAppSiteName returns the AppSiteName field value if set, zero value otherwise.
func (o *Settings) GetAppSiteName() string {
	if o == nil || IsNil(o.AppSiteName) {
		var ret string
		return ret
	}
	return *o.AppSiteName
}

// GetAppSiteNameOk returns a tuple with the AppSiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppSiteName) {
		return nil, false
	}
	return o.AppSiteName, true
}

// HasAppSiteName returns a boolean if a field has been set.
func (o *Settings) HasAppSiteName() bool {
	if o != nil && !IsNil(o.AppSiteName) {
		return true
	}

	return false
}

// SetAppSiteName gets a reference to the given string and assigns it to the AppSiteName field.
func (o *Settings) SetAppSiteName(v string) {
	o.AppSiteName = &v
}

// GetAppRootUrl returns the AppRootUrl field value if set, zero value otherwise.
func (o *Settings) GetAppRootUrl() string {
	if o == nil || IsNil(o.AppRootUrl) {
		var ret string
		return ret
	}
	return *o.AppRootUrl
}

// GetAppRootUrlOk returns a tuple with the AppRootUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppRootUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AppRootUrl) {
		return nil, false
	}
	return o.AppRootUrl, true
}

// HasAppRootUrl returns a boolean if a field has been set.
func (o *Settings) HasAppRootUrl() bool {
	if o != nil && !IsNil(o.AppRootUrl) {
		return true
	}

	return false
}

// SetAppRootUrl gets a reference to the given string and assigns it to the AppRootUrl field.
func (o *Settings) SetAppRootUrl(v string) {
	o.AppRootUrl = &v
}

// GetAppLogoUrl returns the AppLogoUrl field value if set, zero value otherwise.
func (o *Settings) GetAppLogoUrl() string {
	if o == nil || IsNil(o.AppLogoUrl) {
		var ret string
		return ret
	}
	return *o.AppLogoUrl
}

// GetAppLogoUrlOk returns a tuple with the AppLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AppLogoUrl) {
		return nil, false
	}
	return o.AppLogoUrl, true
}

// HasAppLogoUrl returns a boolean if a field has been set.
func (o *Settings) HasAppLogoUrl() bool {
	if o != nil && !IsNil(o.AppLogoUrl) {
		return true
	}

	return false
}

// SetAppLogoUrl gets a reference to the given string and assigns it to the AppLogoUrl field.
func (o *Settings) SetAppLogoUrl(v string) {
	o.AppLogoUrl = &v
}

// GetAppFaviconUrl returns the AppFaviconUrl field value if set, zero value otherwise.
func (o *Settings) GetAppFaviconUrl() string {
	if o == nil || IsNil(o.AppFaviconUrl) {
		var ret string
		return ret
	}
	return *o.AppFaviconUrl
}

// GetAppFaviconUrlOk returns a tuple with the AppFaviconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppFaviconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AppFaviconUrl) {
		return nil, false
	}
	return o.AppFaviconUrl, true
}

// HasAppFaviconUrl returns a boolean if a field has been set.
func (o *Settings) HasAppFaviconUrl() bool {
	if o != nil && !IsNil(o.AppFaviconUrl) {
		return true
	}

	return false
}

// SetAppFaviconUrl gets a reference to the given string and assigns it to the AppFaviconUrl field.
func (o *Settings) SetAppFaviconUrl(v string) {
	o.AppFaviconUrl = &v
}

// GetAppFromEmail returns the AppFromEmail field value if set, zero value otherwise.
func (o *Settings) GetAppFromEmail() string {
	if o == nil || IsNil(o.AppFromEmail) {
		var ret string
		return ret
	}
	return *o.AppFromEmail
}

// GetAppFromEmailOk returns a tuple with the AppFromEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppFromEmailOk() (*string, bool) {
	if o == nil || IsNil(o.AppFromEmail) {
		return nil, false
	}
	return o.AppFromEmail, true
}

// HasAppFromEmail returns a boolean if a field has been set.
func (o *Settings) HasAppFromEmail() bool {
	if o != nil && !IsNil(o.AppFromEmail) {
		return true
	}

	return false
}

// SetAppFromEmail gets a reference to the given string and assigns it to the AppFromEmail field.
func (o *Settings) SetAppFromEmail(v string) {
	o.AppFromEmail = &v
}

// GetAppNotifyEmails returns the AppNotifyEmails field value if set, zero value otherwise.
func (o *Settings) GetAppNotifyEmails() []string {
	if o == nil || IsNil(o.AppNotifyEmails) {
		var ret []string
		return ret
	}
	return o.AppNotifyEmails
}

// GetAppNotifyEmailsOk returns a tuple with the AppNotifyEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppNotifyEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppNotifyEmails) {
		return nil, false
	}
	return o.AppNotifyEmails, true
}

// HasAppNotifyEmails returns a boolean if a field has been set.
func (o *Settings) HasAppNotifyEmails() bool {
	if o != nil && !IsNil(o.AppNotifyEmails) {
		return true
	}

	return false
}

// SetAppNotifyEmails gets a reference to the given []string and assigns it to the AppNotifyEmails field.
func (o *Settings) SetAppNotifyEmails(v []string) {
	o.AppNotifyEmails = v
}

// GetAppEnablePublicSubscriptionPage returns the AppEnablePublicSubscriptionPage field value if set, zero value otherwise.
func (o *Settings) GetAppEnablePublicSubscriptionPage() bool {
	if o == nil || IsNil(o.AppEnablePublicSubscriptionPage) {
		var ret bool
		return ret
	}
	return *o.AppEnablePublicSubscriptionPage
}

// GetAppEnablePublicSubscriptionPageOk returns a tuple with the AppEnablePublicSubscriptionPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppEnablePublicSubscriptionPageOk() (*bool, bool) {
	if o == nil || IsNil(o.AppEnablePublicSubscriptionPage) {
		return nil, false
	}
	return o.AppEnablePublicSubscriptionPage, true
}

// HasAppEnablePublicSubscriptionPage returns a boolean if a field has been set.
func (o *Settings) HasAppEnablePublicSubscriptionPage() bool {
	if o != nil && !IsNil(o.AppEnablePublicSubscriptionPage) {
		return true
	}

	return false
}

// SetAppEnablePublicSubscriptionPage gets a reference to the given bool and assigns it to the AppEnablePublicSubscriptionPage field.
func (o *Settings) SetAppEnablePublicSubscriptionPage(v bool) {
	o.AppEnablePublicSubscriptionPage = &v
}

// GetAppEnablePublicArchive returns the AppEnablePublicArchive field value if set, zero value otherwise.
func (o *Settings) GetAppEnablePublicArchive() bool {
	if o == nil || IsNil(o.AppEnablePublicArchive) {
		var ret bool
		return ret
	}
	return *o.AppEnablePublicArchive
}

// GetAppEnablePublicArchiveOk returns a tuple with the AppEnablePublicArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppEnablePublicArchiveOk() (*bool, bool) {
	if o == nil || IsNil(o.AppEnablePublicArchive) {
		return nil, false
	}
	return o.AppEnablePublicArchive, true
}

// HasAppEnablePublicArchive returns a boolean if a field has been set.
func (o *Settings) HasAppEnablePublicArchive() bool {
	if o != nil && !IsNil(o.AppEnablePublicArchive) {
		return true
	}

	return false
}

// SetAppEnablePublicArchive gets a reference to the given bool and assigns it to the AppEnablePublicArchive field.
func (o *Settings) SetAppEnablePublicArchive(v bool) {
	o.AppEnablePublicArchive = &v
}

// GetAppSendOptinConfirmation returns the AppSendOptinConfirmation field value if set, zero value otherwise.
func (o *Settings) GetAppSendOptinConfirmation() bool {
	if o == nil || IsNil(o.AppSendOptinConfirmation) {
		var ret bool
		return ret
	}
	return *o.AppSendOptinConfirmation
}

// GetAppSendOptinConfirmationOk returns a tuple with the AppSendOptinConfirmation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppSendOptinConfirmationOk() (*bool, bool) {
	if o == nil || IsNil(o.AppSendOptinConfirmation) {
		return nil, false
	}
	return o.AppSendOptinConfirmation, true
}

// HasAppSendOptinConfirmation returns a boolean if a field has been set.
func (o *Settings) HasAppSendOptinConfirmation() bool {
	if o != nil && !IsNil(o.AppSendOptinConfirmation) {
		return true
	}

	return false
}

// SetAppSendOptinConfirmation gets a reference to the given bool and assigns it to the AppSendOptinConfirmation field.
func (o *Settings) SetAppSendOptinConfirmation(v bool) {
	o.AppSendOptinConfirmation = &v
}

// GetAppCheckUpdates returns the AppCheckUpdates field value if set, zero value otherwise.
func (o *Settings) GetAppCheckUpdates() bool {
	if o == nil || IsNil(o.AppCheckUpdates) {
		var ret bool
		return ret
	}
	return *o.AppCheckUpdates
}

// GetAppCheckUpdatesOk returns a tuple with the AppCheckUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppCheckUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.AppCheckUpdates) {
		return nil, false
	}
	return o.AppCheckUpdates, true
}

// HasAppCheckUpdates returns a boolean if a field has been set.
func (o *Settings) HasAppCheckUpdates() bool {
	if o != nil && !IsNil(o.AppCheckUpdates) {
		return true
	}

	return false
}

// SetAppCheckUpdates gets a reference to the given bool and assigns it to the AppCheckUpdates field.
func (o *Settings) SetAppCheckUpdates(v bool) {
	o.AppCheckUpdates = &v
}

// GetAppLang returns the AppLang field value if set, zero value otherwise.
func (o *Settings) GetAppLang() string {
	if o == nil || IsNil(o.AppLang) {
		var ret string
		return ret
	}
	return *o.AppLang
}

// GetAppLangOk returns a tuple with the AppLang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppLangOk() (*string, bool) {
	if o == nil || IsNil(o.AppLang) {
		return nil, false
	}
	return o.AppLang, true
}

// HasAppLang returns a boolean if a field has been set.
func (o *Settings) HasAppLang() bool {
	if o != nil && !IsNil(o.AppLang) {
		return true
	}

	return false
}

// SetAppLang gets a reference to the given string and assigns it to the AppLang field.
func (o *Settings) SetAppLang(v string) {
	o.AppLang = &v
}

// GetAppBatchSize returns the AppBatchSize field value if set, zero value otherwise.
func (o *Settings) GetAppBatchSize() int32 {
	if o == nil || IsNil(o.AppBatchSize) {
		var ret int32
		return ret
	}
	return *o.AppBatchSize
}

// GetAppBatchSizeOk returns a tuple with the AppBatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppBatchSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.AppBatchSize) {
		return nil, false
	}
	return o.AppBatchSize, true
}

// HasAppBatchSize returns a boolean if a field has been set.
func (o *Settings) HasAppBatchSize() bool {
	if o != nil && !IsNil(o.AppBatchSize) {
		return true
	}

	return false
}

// SetAppBatchSize gets a reference to the given int32 and assigns it to the AppBatchSize field.
func (o *Settings) SetAppBatchSize(v int32) {
	o.AppBatchSize = &v
}

// GetAppConcurrency returns the AppConcurrency field value if set, zero value otherwise.
func (o *Settings) GetAppConcurrency() int32 {
	if o == nil || IsNil(o.AppConcurrency) {
		var ret int32
		return ret
	}
	return *o.AppConcurrency
}

// GetAppConcurrencyOk returns a tuple with the AppConcurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppConcurrencyOk() (*int32, bool) {
	if o == nil || IsNil(o.AppConcurrency) {
		return nil, false
	}
	return o.AppConcurrency, true
}

// HasAppConcurrency returns a boolean if a field has been set.
func (o *Settings) HasAppConcurrency() bool {
	if o != nil && !IsNil(o.AppConcurrency) {
		return true
	}

	return false
}

// SetAppConcurrency gets a reference to the given int32 and assigns it to the AppConcurrency field.
func (o *Settings) SetAppConcurrency(v int32) {
	o.AppConcurrency = &v
}

// GetAppMaxSendErrors returns the AppMaxSendErrors field value if set, zero value otherwise.
func (o *Settings) GetAppMaxSendErrors() int32 {
	if o == nil || IsNil(o.AppMaxSendErrors) {
		var ret int32
		return ret
	}
	return *o.AppMaxSendErrors
}

// GetAppMaxSendErrorsOk returns a tuple with the AppMaxSendErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppMaxSendErrorsOk() (*int32, bool) {
	if o == nil || IsNil(o.AppMaxSendErrors) {
		return nil, false
	}
	return o.AppMaxSendErrors, true
}

// HasAppMaxSendErrors returns a boolean if a field has been set.
func (o *Settings) HasAppMaxSendErrors() bool {
	if o != nil && !IsNil(o.AppMaxSendErrors) {
		return true
	}

	return false
}

// SetAppMaxSendErrors gets a reference to the given int32 and assigns it to the AppMaxSendErrors field.
func (o *Settings) SetAppMaxSendErrors(v int32) {
	o.AppMaxSendErrors = &v
}

// GetAppMessageRate returns the AppMessageRate field value if set, zero value otherwise.
func (o *Settings) GetAppMessageRate() int32 {
	if o == nil || IsNil(o.AppMessageRate) {
		var ret int32
		return ret
	}
	return *o.AppMessageRate
}

// GetAppMessageRateOk returns a tuple with the AppMessageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppMessageRateOk() (*int32, bool) {
	if o == nil || IsNil(o.AppMessageRate) {
		return nil, false
	}
	return o.AppMessageRate, true
}

// HasAppMessageRate returns a boolean if a field has been set.
func (o *Settings) HasAppMessageRate() bool {
	if o != nil && !IsNil(o.AppMessageRate) {
		return true
	}

	return false
}

// SetAppMessageRate gets a reference to the given int32 and assigns it to the AppMessageRate field.
func (o *Settings) SetAppMessageRate(v int32) {
	o.AppMessageRate = &v
}

// GetAppMessageSlidingWindow returns the AppMessageSlidingWindow field value if set, zero value otherwise.
func (o *Settings) GetAppMessageSlidingWindow() bool {
	if o == nil || IsNil(o.AppMessageSlidingWindow) {
		var ret bool
		return ret
	}
	return *o.AppMessageSlidingWindow
}

// GetAppMessageSlidingWindowOk returns a tuple with the AppMessageSlidingWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppMessageSlidingWindowOk() (*bool, bool) {
	if o == nil || IsNil(o.AppMessageSlidingWindow) {
		return nil, false
	}
	return o.AppMessageSlidingWindow, true
}

// HasAppMessageSlidingWindow returns a boolean if a field has been set.
func (o *Settings) HasAppMessageSlidingWindow() bool {
	if o != nil && !IsNil(o.AppMessageSlidingWindow) {
		return true
	}

	return false
}

// SetAppMessageSlidingWindow gets a reference to the given bool and assigns it to the AppMessageSlidingWindow field.
func (o *Settings) SetAppMessageSlidingWindow(v bool) {
	o.AppMessageSlidingWindow = &v
}

// GetAppMessageSlidingWindowDuration returns the AppMessageSlidingWindowDuration field value if set, zero value otherwise.
func (o *Settings) GetAppMessageSlidingWindowDuration() string {
	if o == nil || IsNil(o.AppMessageSlidingWindowDuration) {
		var ret string
		return ret
	}
	return *o.AppMessageSlidingWindowDuration
}

// GetAppMessageSlidingWindowDurationOk returns a tuple with the AppMessageSlidingWindowDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppMessageSlidingWindowDurationOk() (*string, bool) {
	if o == nil || IsNil(o.AppMessageSlidingWindowDuration) {
		return nil, false
	}
	return o.AppMessageSlidingWindowDuration, true
}

// HasAppMessageSlidingWindowDuration returns a boolean if a field has been set.
func (o *Settings) HasAppMessageSlidingWindowDuration() bool {
	if o != nil && !IsNil(o.AppMessageSlidingWindowDuration) {
		return true
	}

	return false
}

// SetAppMessageSlidingWindowDuration gets a reference to the given string and assigns it to the AppMessageSlidingWindowDuration field.
func (o *Settings) SetAppMessageSlidingWindowDuration(v string) {
	o.AppMessageSlidingWindowDuration = &v
}

// GetAppMessageSlidingWindowRate returns the AppMessageSlidingWindowRate field value if set, zero value otherwise.
func (o *Settings) GetAppMessageSlidingWindowRate() int32 {
	if o == nil || IsNil(o.AppMessageSlidingWindowRate) {
		var ret int32
		return ret
	}
	return *o.AppMessageSlidingWindowRate
}

// GetAppMessageSlidingWindowRateOk returns a tuple with the AppMessageSlidingWindowRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppMessageSlidingWindowRateOk() (*int32, bool) {
	if o == nil || IsNil(o.AppMessageSlidingWindowRate) {
		return nil, false
	}
	return o.AppMessageSlidingWindowRate, true
}

// HasAppMessageSlidingWindowRate returns a boolean if a field has been set.
func (o *Settings) HasAppMessageSlidingWindowRate() bool {
	if o != nil && !IsNil(o.AppMessageSlidingWindowRate) {
		return true
	}

	return false
}

// SetAppMessageSlidingWindowRate gets a reference to the given int32 and assigns it to the AppMessageSlidingWindowRate field.
func (o *Settings) SetAppMessageSlidingWindowRate(v int32) {
	o.AppMessageSlidingWindowRate = &v
}

// GetPrivacyIndividualTracking returns the PrivacyIndividualTracking field value if set, zero value otherwise.
func (o *Settings) GetPrivacyIndividualTracking() bool {
	if o == nil || IsNil(o.PrivacyIndividualTracking) {
		var ret bool
		return ret
	}
	return *o.PrivacyIndividualTracking
}

// GetPrivacyIndividualTrackingOk returns a tuple with the PrivacyIndividualTracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetPrivacyIndividualTrackingOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivacyIndividualTracking) {
		return nil, false
	}
	return o.PrivacyIndividualTracking, true
}

// HasPrivacyIndividualTracking returns a boolean if a field has been set.
func (o *Settings) HasPrivacyIndividualTracking() bool {
	if o != nil && !IsNil(o.PrivacyIndividualTracking) {
		return true
	}

	return false
}

// SetPrivacyIndividualTracking gets a reference to the given bool and assigns it to the PrivacyIndividualTracking field.
func (o *Settings) SetPrivacyIndividualTracking(v bool) {
	o.PrivacyIndividualTracking = &v
}

// GetPrivacyUnsubscribeHeader returns the PrivacyUnsubscribeHeader field value if set, zero value otherwise.
func (o *Settings) GetPrivacyUnsubscribeHeader() bool {
	if o == nil || IsNil(o.PrivacyUnsubscribeHeader) {
		var ret bool
		return ret
	}
	return *o.PrivacyUnsubscribeHeader
}

// GetPrivacyUnsubscribeHeaderOk returns a tuple with the PrivacyUnsubscribeHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetPrivacyUnsubscribeHeaderOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivacyUnsubscribeHeader) {
		return nil, false
	}
	return o.PrivacyUnsubscribeHeader, true
}

// HasPrivacyUnsubscribeHeader returns a boolean if a field has been set.
func (o *Settings) HasPrivacyUnsubscribeHeader() bool {
	if o != nil && !IsNil(o.PrivacyUnsubscribeHeader) {
		return true
	}

	return false
}

// SetPrivacyUnsubscribeHeader gets a reference to the given bool and assigns it to the PrivacyUnsubscribeHeader field.
func (o *Settings) SetPrivacyUnsubscribeHeader(v bool) {
	o.PrivacyUnsubscribeHeader = &v
}

// GetPrivacyAllowBlocklist returns the PrivacyAllowBlocklist field value if set, zero value otherwise.
func (o *Settings) GetPrivacyAllowBlocklist() bool {
	if o == nil || IsNil(o.PrivacyAllowBlocklist) {
		var ret bool
		return ret
	}
	return *o.PrivacyAllowBlocklist
}

// GetPrivacyAllowBlocklistOk returns a tuple with the PrivacyAllowBlocklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetPrivacyAllowBlocklistOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivacyAllowBlocklist) {
		return nil, false
	}
	return o.PrivacyAllowBlocklist, true
}

// HasPrivacyAllowBlocklist returns a boolean if a field has been set.
func (o *Settings) HasPrivacyAllowBlocklist() bool {
	if o != nil && !IsNil(o.PrivacyAllowBlocklist) {
		return true
	}

	return false
}

// SetPrivacyAllowBlocklist gets a reference to the given bool and assigns it to the PrivacyAllowBlocklist field.
func (o *Settings) SetPrivacyAllowBlocklist(v bool) {
	o.PrivacyAllowBlocklist = &v
}

// GetPrivacyAllowPreferences returns the PrivacyAllowPreferences field value if set, zero value otherwise.
func (o *Settings) GetPrivacyAllowPreferences() bool {
	if o == nil || IsNil(o.PrivacyAllowPreferences) {
		var ret bool
		return ret
	}
	return *o.PrivacyAllowPreferences
}

// GetPrivacyAllowPreferencesOk returns a tuple with the PrivacyAllowPreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetPrivacyAllowPreferencesOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivacyAllowPreferences) {
		return nil, false
	}
	return o.PrivacyAllowPreferences, true
}

// HasPrivacyAllowPreferences returns a boolean if a field has been set.
func (o *Settings) HasPrivacyAllowPreferences() bool {
	if o != nil && !IsNil(o.PrivacyAllowPreferences) {
		return true
	}

	return false
}

// SetPrivacyAllowPreferences gets a reference to the given bool and assigns it to the PrivacyAllowPreferences field.
func (o *Settings) SetPrivacyAllowPreferences(v bool) {
	o.PrivacyAllowPreferences = &v
}

// GetPrivacyAllowExport returns the PrivacyAllowExport field value if set, zero value otherwise.
func (o *Settings) GetPrivacyAllowExport() bool {
	if o == nil || IsNil(o.PrivacyAllowExport) {
		var ret bool
		return ret
	}
	return *o.PrivacyAllowExport
}

// GetPrivacyAllowExportOk returns a tuple with the PrivacyAllowExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetPrivacyAllowExportOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivacyAllowExport) {
		return nil, false
	}
	return o.PrivacyAllowExport, true
}

// HasPrivacyAllowExport returns a boolean if a field has been set.
func (o *Settings) HasPrivacyAllowExport() bool {
	if o != nil && !IsNil(o.PrivacyAllowExport) {
		return true
	}

	return false
}

// SetPrivacyAllowExport gets a reference to the given bool and assigns it to the PrivacyAllowExport field.
func (o *Settings) SetPrivacyAllowExport(v bool) {
	o.PrivacyAllowExport = &v
}

// GetPrivacyAllowWipe returns the PrivacyAllowWipe field value if set, zero value otherwise.
func (o *Settings) GetPrivacyAllowWipe() bool {
	if o == nil || IsNil(o.PrivacyAllowWipe) {
		var ret bool
		return ret
	}
	return *o.PrivacyAllowWipe
}

// GetPrivacyAllowWipeOk returns a tuple with the PrivacyAllowWipe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetPrivacyAllowWipeOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivacyAllowWipe) {
		return nil, false
	}
	return o.PrivacyAllowWipe, true
}

// HasPrivacyAllowWipe returns a boolean if a field has been set.
func (o *Settings) HasPrivacyAllowWipe() bool {
	if o != nil && !IsNil(o.PrivacyAllowWipe) {
		return true
	}

	return false
}

// SetPrivacyAllowWipe gets a reference to the given bool and assigns it to the PrivacyAllowWipe field.
func (o *Settings) SetPrivacyAllowWipe(v bool) {
	o.PrivacyAllowWipe = &v
}

// GetPrivacyExportable returns the PrivacyExportable field value if set, zero value otherwise.
func (o *Settings) GetPrivacyExportable() []string {
	if o == nil || IsNil(o.PrivacyExportable) {
		var ret []string
		return ret
	}
	return o.PrivacyExportable
}

// GetPrivacyExportableOk returns a tuple with the PrivacyExportable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetPrivacyExportableOk() ([]string, bool) {
	if o == nil || IsNil(o.PrivacyExportable) {
		return nil, false
	}
	return o.PrivacyExportable, true
}

// HasPrivacyExportable returns a boolean if a field has been set.
func (o *Settings) HasPrivacyExportable() bool {
	if o != nil && !IsNil(o.PrivacyExportable) {
		return true
	}

	return false
}

// SetPrivacyExportable gets a reference to the given []string and assigns it to the PrivacyExportable field.
func (o *Settings) SetPrivacyExportable(v []string) {
	o.PrivacyExportable = v
}

// GetPrivacyDomainBlocklist returns the PrivacyDomainBlocklist field value if set, zero value otherwise.
func (o *Settings) GetPrivacyDomainBlocklist() []map[string]interface{} {
	if o == nil || IsNil(o.PrivacyDomainBlocklist) {
		var ret []map[string]interface{}
		return ret
	}
	return o.PrivacyDomainBlocklist
}

// GetPrivacyDomainBlocklistOk returns a tuple with the PrivacyDomainBlocklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetPrivacyDomainBlocklistOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.PrivacyDomainBlocklist) {
		return nil, false
	}
	return o.PrivacyDomainBlocklist, true
}

// HasPrivacyDomainBlocklist returns a boolean if a field has been set.
func (o *Settings) HasPrivacyDomainBlocklist() bool {
	if o != nil && !IsNil(o.PrivacyDomainBlocklist) {
		return true
	}

	return false
}

// SetPrivacyDomainBlocklist gets a reference to the given []map[string]interface{} and assigns it to the PrivacyDomainBlocklist field.
func (o *Settings) SetPrivacyDomainBlocklist(v []map[string]interface{}) {
	o.PrivacyDomainBlocklist = v
}

// GetUploadProvider returns the UploadProvider field value if set, zero value otherwise.
func (o *Settings) GetUploadProvider() string {
	if o == nil || IsNil(o.UploadProvider) {
		var ret string
		return ret
	}
	return *o.UploadProvider
}

// GetUploadProviderOk returns a tuple with the UploadProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadProviderOk() (*string, bool) {
	if o == nil || IsNil(o.UploadProvider) {
		return nil, false
	}
	return o.UploadProvider, true
}

// HasUploadProvider returns a boolean if a field has been set.
func (o *Settings) HasUploadProvider() bool {
	if o != nil && !IsNil(o.UploadProvider) {
		return true
	}

	return false
}

// SetUploadProvider gets a reference to the given string and assigns it to the UploadProvider field.
func (o *Settings) SetUploadProvider(v string) {
	o.UploadProvider = &v
}

// GetUploadFilesystemUploadPath returns the UploadFilesystemUploadPath field value if set, zero value otherwise.
func (o *Settings) GetUploadFilesystemUploadPath() string {
	if o == nil || IsNil(o.UploadFilesystemUploadPath) {
		var ret string
		return ret
	}
	return *o.UploadFilesystemUploadPath
}

// GetUploadFilesystemUploadPathOk returns a tuple with the UploadFilesystemUploadPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadFilesystemUploadPathOk() (*string, bool) {
	if o == nil || IsNil(o.UploadFilesystemUploadPath) {
		return nil, false
	}
	return o.UploadFilesystemUploadPath, true
}

// HasUploadFilesystemUploadPath returns a boolean if a field has been set.
func (o *Settings) HasUploadFilesystemUploadPath() bool {
	if o != nil && !IsNil(o.UploadFilesystemUploadPath) {
		return true
	}

	return false
}

// SetUploadFilesystemUploadPath gets a reference to the given string and assigns it to the UploadFilesystemUploadPath field.
func (o *Settings) SetUploadFilesystemUploadPath(v string) {
	o.UploadFilesystemUploadPath = &v
}

// GetUploadFilesystemUploadUri returns the UploadFilesystemUploadUri field value if set, zero value otherwise.
func (o *Settings) GetUploadFilesystemUploadUri() string {
	if o == nil || IsNil(o.UploadFilesystemUploadUri) {
		var ret string
		return ret
	}
	return *o.UploadFilesystemUploadUri
}

// GetUploadFilesystemUploadUriOk returns a tuple with the UploadFilesystemUploadUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadFilesystemUploadUriOk() (*string, bool) {
	if o == nil || IsNil(o.UploadFilesystemUploadUri) {
		return nil, false
	}
	return o.UploadFilesystemUploadUri, true
}

// HasUploadFilesystemUploadUri returns a boolean if a field has been set.
func (o *Settings) HasUploadFilesystemUploadUri() bool {
	if o != nil && !IsNil(o.UploadFilesystemUploadUri) {
		return true
	}

	return false
}

// SetUploadFilesystemUploadUri gets a reference to the given string and assigns it to the UploadFilesystemUploadUri field.
func (o *Settings) SetUploadFilesystemUploadUri(v string) {
	o.UploadFilesystemUploadUri = &v
}

// GetUploadS3Url returns the UploadS3Url field value if set, zero value otherwise.
func (o *Settings) GetUploadS3Url() string {
	if o == nil || IsNil(o.UploadS3Url) {
		var ret string
		return ret
	}
	return *o.UploadS3Url
}

// GetUploadS3UrlOk returns a tuple with the UploadS3Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadS3UrlOk() (*string, bool) {
	if o == nil || IsNil(o.UploadS3Url) {
		return nil, false
	}
	return o.UploadS3Url, true
}

// HasUploadS3Url returns a boolean if a field has been set.
func (o *Settings) HasUploadS3Url() bool {
	if o != nil && !IsNil(o.UploadS3Url) {
		return true
	}

	return false
}

// SetUploadS3Url gets a reference to the given string and assigns it to the UploadS3Url field.
func (o *Settings) SetUploadS3Url(v string) {
	o.UploadS3Url = &v
}

// GetUploadS3PublicUrl returns the UploadS3PublicUrl field value if set, zero value otherwise.
func (o *Settings) GetUploadS3PublicUrl() string {
	if o == nil || IsNil(o.UploadS3PublicUrl) {
		var ret string
		return ret
	}
	return *o.UploadS3PublicUrl
}

// GetUploadS3PublicUrlOk returns a tuple with the UploadS3PublicUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadS3PublicUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UploadS3PublicUrl) {
		return nil, false
	}
	return o.UploadS3PublicUrl, true
}

// HasUploadS3PublicUrl returns a boolean if a field has been set.
func (o *Settings) HasUploadS3PublicUrl() bool {
	if o != nil && !IsNil(o.UploadS3PublicUrl) {
		return true
	}

	return false
}

// SetUploadS3PublicUrl gets a reference to the given string and assigns it to the UploadS3PublicUrl field.
func (o *Settings) SetUploadS3PublicUrl(v string) {
	o.UploadS3PublicUrl = &v
}

// GetUploadS3AwsAccessKeyId returns the UploadS3AwsAccessKeyId field value if set, zero value otherwise.
func (o *Settings) GetUploadS3AwsAccessKeyId() string {
	if o == nil || IsNil(o.UploadS3AwsAccessKeyId) {
		var ret string
		return ret
	}
	return *o.UploadS3AwsAccessKeyId
}

// GetUploadS3AwsAccessKeyIdOk returns a tuple with the UploadS3AwsAccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadS3AwsAccessKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.UploadS3AwsAccessKeyId) {
		return nil, false
	}
	return o.UploadS3AwsAccessKeyId, true
}

// HasUploadS3AwsAccessKeyId returns a boolean if a field has been set.
func (o *Settings) HasUploadS3AwsAccessKeyId() bool {
	if o != nil && !IsNil(o.UploadS3AwsAccessKeyId) {
		return true
	}

	return false
}

// SetUploadS3AwsAccessKeyId gets a reference to the given string and assigns it to the UploadS3AwsAccessKeyId field.
func (o *Settings) SetUploadS3AwsAccessKeyId(v string) {
	o.UploadS3AwsAccessKeyId = &v
}

// GetUploadS3AwsDefaultRegion returns the UploadS3AwsDefaultRegion field value if set, zero value otherwise.
func (o *Settings) GetUploadS3AwsDefaultRegion() string {
	if o == nil || IsNil(o.UploadS3AwsDefaultRegion) {
		var ret string
		return ret
	}
	return *o.UploadS3AwsDefaultRegion
}

// GetUploadS3AwsDefaultRegionOk returns a tuple with the UploadS3AwsDefaultRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadS3AwsDefaultRegionOk() (*string, bool) {
	if o == nil || IsNil(o.UploadS3AwsDefaultRegion) {
		return nil, false
	}
	return o.UploadS3AwsDefaultRegion, true
}

// HasUploadS3AwsDefaultRegion returns a boolean if a field has been set.
func (o *Settings) HasUploadS3AwsDefaultRegion() bool {
	if o != nil && !IsNil(o.UploadS3AwsDefaultRegion) {
		return true
	}

	return false
}

// SetUploadS3AwsDefaultRegion gets a reference to the given string and assigns it to the UploadS3AwsDefaultRegion field.
func (o *Settings) SetUploadS3AwsDefaultRegion(v string) {
	o.UploadS3AwsDefaultRegion = &v
}

// GetUploadS3Bucket returns the UploadS3Bucket field value if set, zero value otherwise.
func (o *Settings) GetUploadS3Bucket() string {
	if o == nil || IsNil(o.UploadS3Bucket) {
		var ret string
		return ret
	}
	return *o.UploadS3Bucket
}

// GetUploadS3BucketOk returns a tuple with the UploadS3Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadS3BucketOk() (*string, bool) {
	if o == nil || IsNil(o.UploadS3Bucket) {
		return nil, false
	}
	return o.UploadS3Bucket, true
}

// HasUploadS3Bucket returns a boolean if a field has been set.
func (o *Settings) HasUploadS3Bucket() bool {
	if o != nil && !IsNil(o.UploadS3Bucket) {
		return true
	}

	return false
}

// SetUploadS3Bucket gets a reference to the given string and assigns it to the UploadS3Bucket field.
func (o *Settings) SetUploadS3Bucket(v string) {
	o.UploadS3Bucket = &v
}

// GetUploadS3BucketDomain returns the UploadS3BucketDomain field value if set, zero value otherwise.
func (o *Settings) GetUploadS3BucketDomain() string {
	if o == nil || IsNil(o.UploadS3BucketDomain) {
		var ret string
		return ret
	}
	return *o.UploadS3BucketDomain
}

// GetUploadS3BucketDomainOk returns a tuple with the UploadS3BucketDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadS3BucketDomainOk() (*string, bool) {
	if o == nil || IsNil(o.UploadS3BucketDomain) {
		return nil, false
	}
	return o.UploadS3BucketDomain, true
}

// HasUploadS3BucketDomain returns a boolean if a field has been set.
func (o *Settings) HasUploadS3BucketDomain() bool {
	if o != nil && !IsNil(o.UploadS3BucketDomain) {
		return true
	}

	return false
}

// SetUploadS3BucketDomain gets a reference to the given string and assigns it to the UploadS3BucketDomain field.
func (o *Settings) SetUploadS3BucketDomain(v string) {
	o.UploadS3BucketDomain = &v
}

// GetUploadS3BucketPath returns the UploadS3BucketPath field value if set, zero value otherwise.
func (o *Settings) GetUploadS3BucketPath() string {
	if o == nil || IsNil(o.UploadS3BucketPath) {
		var ret string
		return ret
	}
	return *o.UploadS3BucketPath
}

// GetUploadS3BucketPathOk returns a tuple with the UploadS3BucketPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadS3BucketPathOk() (*string, bool) {
	if o == nil || IsNil(o.UploadS3BucketPath) {
		return nil, false
	}
	return o.UploadS3BucketPath, true
}

// HasUploadS3BucketPath returns a boolean if a field has been set.
func (o *Settings) HasUploadS3BucketPath() bool {
	if o != nil && !IsNil(o.UploadS3BucketPath) {
		return true
	}

	return false
}

// SetUploadS3BucketPath gets a reference to the given string and assigns it to the UploadS3BucketPath field.
func (o *Settings) SetUploadS3BucketPath(v string) {
	o.UploadS3BucketPath = &v
}

// GetUploadS3BucketType returns the UploadS3BucketType field value if set, zero value otherwise.
func (o *Settings) GetUploadS3BucketType() string {
	if o == nil || IsNil(o.UploadS3BucketType) {
		var ret string
		return ret
	}
	return *o.UploadS3BucketType
}

// GetUploadS3BucketTypeOk returns a tuple with the UploadS3BucketType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadS3BucketTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UploadS3BucketType) {
		return nil, false
	}
	return o.UploadS3BucketType, true
}

// HasUploadS3BucketType returns a boolean if a field has been set.
func (o *Settings) HasUploadS3BucketType() bool {
	if o != nil && !IsNil(o.UploadS3BucketType) {
		return true
	}

	return false
}

// SetUploadS3BucketType gets a reference to the given string and assigns it to the UploadS3BucketType field.
func (o *Settings) SetUploadS3BucketType(v string) {
	o.UploadS3BucketType = &v
}

// GetUploadS3Expiry returns the UploadS3Expiry field value if set, zero value otherwise.
func (o *Settings) GetUploadS3Expiry() string {
	if o == nil || IsNil(o.UploadS3Expiry) {
		var ret string
		return ret
	}
	return *o.UploadS3Expiry
}

// GetUploadS3ExpiryOk returns a tuple with the UploadS3Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUploadS3ExpiryOk() (*string, bool) {
	if o == nil || IsNil(o.UploadS3Expiry) {
		return nil, false
	}
	return o.UploadS3Expiry, true
}

// HasUploadS3Expiry returns a boolean if a field has been set.
func (o *Settings) HasUploadS3Expiry() bool {
	if o != nil && !IsNil(o.UploadS3Expiry) {
		return true
	}

	return false
}

// SetUploadS3Expiry gets a reference to the given string and assigns it to the UploadS3Expiry field.
func (o *Settings) SetUploadS3Expiry(v string) {
	o.UploadS3Expiry = &v
}

// GetSmtp returns the Smtp field value if set, zero value otherwise.
func (o *Settings) GetSmtp() []SMTPSettings {
	if o == nil || IsNil(o.Smtp) {
		var ret []SMTPSettings
		return ret
	}
	return o.Smtp
}

// GetSmtpOk returns a tuple with the Smtp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetSmtpOk() ([]SMTPSettings, bool) {
	if o == nil || IsNil(o.Smtp) {
		return nil, false
	}
	return o.Smtp, true
}

// HasSmtp returns a boolean if a field has been set.
func (o *Settings) HasSmtp() bool {
	if o != nil && !IsNil(o.Smtp) {
		return true
	}

	return false
}

// SetSmtp gets a reference to the given []SMTPSettings and assigns it to the Smtp field.
func (o *Settings) SetSmtp(v []SMTPSettings) {
	o.Smtp = v
}

// GetMessengers returns the Messengers field value if set, zero value otherwise.
func (o *Settings) GetMessengers() []map[string]interface{} {
	if o == nil || IsNil(o.Messengers) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Messengers
}

// GetMessengersOk returns a tuple with the Messengers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetMessengersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Messengers) {
		return nil, false
	}
	return o.Messengers, true
}

// HasMessengers returns a boolean if a field has been set.
func (o *Settings) HasMessengers() bool {
	if o != nil && !IsNil(o.Messengers) {
		return true
	}

	return false
}

// SetMessengers gets a reference to the given []map[string]interface{} and assigns it to the Messengers field.
func (o *Settings) SetMessengers(v []map[string]interface{}) {
	o.Messengers = v
}

// GetBounceEnabled returns the BounceEnabled field value if set, zero value otherwise.
func (o *Settings) GetBounceEnabled() bool {
	if o == nil || IsNil(o.BounceEnabled) {
		var ret bool
		return ret
	}
	return *o.BounceEnabled
}

// GetBounceEnabledOk returns a tuple with the BounceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetBounceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BounceEnabled) {
		return nil, false
	}
	return o.BounceEnabled, true
}

// HasBounceEnabled returns a boolean if a field has been set.
func (o *Settings) HasBounceEnabled() bool {
	if o != nil && !IsNil(o.BounceEnabled) {
		return true
	}

	return false
}

// SetBounceEnabled gets a reference to the given bool and assigns it to the BounceEnabled field.
func (o *Settings) SetBounceEnabled(v bool) {
	o.BounceEnabled = &v
}

// GetBounceWebhooksEnabled returns the BounceWebhooksEnabled field value if set, zero value otherwise.
func (o *Settings) GetBounceWebhooksEnabled() bool {
	if o == nil || IsNil(o.BounceWebhooksEnabled) {
		var ret bool
		return ret
	}
	return *o.BounceWebhooksEnabled
}

// GetBounceWebhooksEnabledOk returns a tuple with the BounceWebhooksEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetBounceWebhooksEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BounceWebhooksEnabled) {
		return nil, false
	}
	return o.BounceWebhooksEnabled, true
}

// HasBounceWebhooksEnabled returns a boolean if a field has been set.
func (o *Settings) HasBounceWebhooksEnabled() bool {
	if o != nil && !IsNil(o.BounceWebhooksEnabled) {
		return true
	}

	return false
}

// SetBounceWebhooksEnabled gets a reference to the given bool and assigns it to the BounceWebhooksEnabled field.
func (o *Settings) SetBounceWebhooksEnabled(v bool) {
	o.BounceWebhooksEnabled = &v
}

// GetBounceCount returns the BounceCount field value if set, zero value otherwise.
func (o *Settings) GetBounceCount() int32 {
	if o == nil || IsNil(o.BounceCount) {
		var ret int32
		return ret
	}
	return *o.BounceCount
}

// GetBounceCountOk returns a tuple with the BounceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetBounceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BounceCount) {
		return nil, false
	}
	return o.BounceCount, true
}

// HasBounceCount returns a boolean if a field has been set.
func (o *Settings) HasBounceCount() bool {
	if o != nil && !IsNil(o.BounceCount) {
		return true
	}

	return false
}

// SetBounceCount gets a reference to the given int32 and assigns it to the BounceCount field.
func (o *Settings) SetBounceCount(v int32) {
	o.BounceCount = &v
}

// GetBounceAction returns the BounceAction field value if set, zero value otherwise.
func (o *Settings) GetBounceAction() string {
	if o == nil || IsNil(o.BounceAction) {
		var ret string
		return ret
	}
	return *o.BounceAction
}

// GetBounceActionOk returns a tuple with the BounceAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetBounceActionOk() (*string, bool) {
	if o == nil || IsNil(o.BounceAction) {
		return nil, false
	}
	return o.BounceAction, true
}

// HasBounceAction returns a boolean if a field has been set.
func (o *Settings) HasBounceAction() bool {
	if o != nil && !IsNil(o.BounceAction) {
		return true
	}

	return false
}

// SetBounceAction gets a reference to the given string and assigns it to the BounceAction field.
func (o *Settings) SetBounceAction(v string) {
	o.BounceAction = &v
}

// GetBounceSesEnabled returns the BounceSesEnabled field value if set, zero value otherwise.
func (o *Settings) GetBounceSesEnabled() bool {
	if o == nil || IsNil(o.BounceSesEnabled) {
		var ret bool
		return ret
	}
	return *o.BounceSesEnabled
}

// GetBounceSesEnabledOk returns a tuple with the BounceSesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetBounceSesEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BounceSesEnabled) {
		return nil, false
	}
	return o.BounceSesEnabled, true
}

// HasBounceSesEnabled returns a boolean if a field has been set.
func (o *Settings) HasBounceSesEnabled() bool {
	if o != nil && !IsNil(o.BounceSesEnabled) {
		return true
	}

	return false
}

// SetBounceSesEnabled gets a reference to the given bool and assigns it to the BounceSesEnabled field.
func (o *Settings) SetBounceSesEnabled(v bool) {
	o.BounceSesEnabled = &v
}

// GetBounceSendgridEnabled returns the BounceSendgridEnabled field value if set, zero value otherwise.
func (o *Settings) GetBounceSendgridEnabled() bool {
	if o == nil || IsNil(o.BounceSendgridEnabled) {
		var ret bool
		return ret
	}
	return *o.BounceSendgridEnabled
}

// GetBounceSendgridEnabledOk returns a tuple with the BounceSendgridEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetBounceSendgridEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BounceSendgridEnabled) {
		return nil, false
	}
	return o.BounceSendgridEnabled, true
}

// HasBounceSendgridEnabled returns a boolean if a field has been set.
func (o *Settings) HasBounceSendgridEnabled() bool {
	if o != nil && !IsNil(o.BounceSendgridEnabled) {
		return true
	}

	return false
}

// SetBounceSendgridEnabled gets a reference to the given bool and assigns it to the BounceSendgridEnabled field.
func (o *Settings) SetBounceSendgridEnabled(v bool) {
	o.BounceSendgridEnabled = &v
}

// GetBounceSendgridKey returns the BounceSendgridKey field value if set, zero value otherwise.
func (o *Settings) GetBounceSendgridKey() string {
	if o == nil || IsNil(o.BounceSendgridKey) {
		var ret string
		return ret
	}
	return *o.BounceSendgridKey
}

// GetBounceSendgridKeyOk returns a tuple with the BounceSendgridKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetBounceSendgridKeyOk() (*string, bool) {
	if o == nil || IsNil(o.BounceSendgridKey) {
		return nil, false
	}
	return o.BounceSendgridKey, true
}

// HasBounceSendgridKey returns a boolean if a field has been set.
func (o *Settings) HasBounceSendgridKey() bool {
	if o != nil && !IsNil(o.BounceSendgridKey) {
		return true
	}

	return false
}

// SetBounceSendgridKey gets a reference to the given string and assigns it to the BounceSendgridKey field.
func (o *Settings) SetBounceSendgridKey(v string) {
	o.BounceSendgridKey = &v
}

// GetBounceMailboxes returns the BounceMailboxes field value if set, zero value otherwise.
func (o *Settings) GetBounceMailboxes() []MailBoxBounces {
	if o == nil || IsNil(o.BounceMailboxes) {
		var ret []MailBoxBounces
		return ret
	}
	return o.BounceMailboxes
}

// GetBounceMailboxesOk returns a tuple with the BounceMailboxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetBounceMailboxesOk() ([]MailBoxBounces, bool) {
	if o == nil || IsNil(o.BounceMailboxes) {
		return nil, false
	}
	return o.BounceMailboxes, true
}

// HasBounceMailboxes returns a boolean if a field has been set.
func (o *Settings) HasBounceMailboxes() bool {
	if o != nil && !IsNil(o.BounceMailboxes) {
		return true
	}

	return false
}

// SetBounceMailboxes gets a reference to the given []MailBoxBounces and assigns it to the BounceMailboxes field.
func (o *Settings) SetBounceMailboxes(v []MailBoxBounces) {
	o.BounceMailboxes = v
}

// GetAppearanceAdminCustomCss returns the AppearanceAdminCustomCss field value if set, zero value otherwise.
func (o *Settings) GetAppearanceAdminCustomCss() string {
	if o == nil || IsNil(o.AppearanceAdminCustomCss) {
		var ret string
		return ret
	}
	return *o.AppearanceAdminCustomCss
}

// GetAppearanceAdminCustomCssOk returns a tuple with the AppearanceAdminCustomCss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppearanceAdminCustomCssOk() (*string, bool) {
	if o == nil || IsNil(o.AppearanceAdminCustomCss) {
		return nil, false
	}
	return o.AppearanceAdminCustomCss, true
}

// HasAppearanceAdminCustomCss returns a boolean if a field has been set.
func (o *Settings) HasAppearanceAdminCustomCss() bool {
	if o != nil && !IsNil(o.AppearanceAdminCustomCss) {
		return true
	}

	return false
}

// SetAppearanceAdminCustomCss gets a reference to the given string and assigns it to the AppearanceAdminCustomCss field.
func (o *Settings) SetAppearanceAdminCustomCss(v string) {
	o.AppearanceAdminCustomCss = &v
}

// GetAppearanceAdminCustomJs returns the AppearanceAdminCustomJs field value if set, zero value otherwise.
func (o *Settings) GetAppearanceAdminCustomJs() string {
	if o == nil || IsNil(o.AppearanceAdminCustomJs) {
		var ret string
		return ret
	}
	return *o.AppearanceAdminCustomJs
}

// GetAppearanceAdminCustomJsOk returns a tuple with the AppearanceAdminCustomJs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppearanceAdminCustomJsOk() (*string, bool) {
	if o == nil || IsNil(o.AppearanceAdminCustomJs) {
		return nil, false
	}
	return o.AppearanceAdminCustomJs, true
}

// HasAppearanceAdminCustomJs returns a boolean if a field has been set.
func (o *Settings) HasAppearanceAdminCustomJs() bool {
	if o != nil && !IsNil(o.AppearanceAdminCustomJs) {
		return true
	}

	return false
}

// SetAppearanceAdminCustomJs gets a reference to the given string and assigns it to the AppearanceAdminCustomJs field.
func (o *Settings) SetAppearanceAdminCustomJs(v string) {
	o.AppearanceAdminCustomJs = &v
}

// GetAppearancePublicCustomCss returns the AppearancePublicCustomCss field value if set, zero value otherwise.
func (o *Settings) GetAppearancePublicCustomCss() string {
	if o == nil || IsNil(o.AppearancePublicCustomCss) {
		var ret string
		return ret
	}
	return *o.AppearancePublicCustomCss
}

// GetAppearancePublicCustomCssOk returns a tuple with the AppearancePublicCustomCss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppearancePublicCustomCssOk() (*string, bool) {
	if o == nil || IsNil(o.AppearancePublicCustomCss) {
		return nil, false
	}
	return o.AppearancePublicCustomCss, true
}

// HasAppearancePublicCustomCss returns a boolean if a field has been set.
func (o *Settings) HasAppearancePublicCustomCss() bool {
	if o != nil && !IsNil(o.AppearancePublicCustomCss) {
		return true
	}

	return false
}

// SetAppearancePublicCustomCss gets a reference to the given string and assigns it to the AppearancePublicCustomCss field.
func (o *Settings) SetAppearancePublicCustomCss(v string) {
	o.AppearancePublicCustomCss = &v
}

// GetAppearancePublicCustomJs returns the AppearancePublicCustomJs field value if set, zero value otherwise.
func (o *Settings) GetAppearancePublicCustomJs() string {
	if o == nil || IsNil(o.AppearancePublicCustomJs) {
		var ret string
		return ret
	}
	return *o.AppearancePublicCustomJs
}

// GetAppearancePublicCustomJsOk returns a tuple with the AppearancePublicCustomJs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppearancePublicCustomJsOk() (*string, bool) {
	if o == nil || IsNil(o.AppearancePublicCustomJs) {
		return nil, false
	}
	return o.AppearancePublicCustomJs, true
}

// HasAppearancePublicCustomJs returns a boolean if a field has been set.
func (o *Settings) HasAppearancePublicCustomJs() bool {
	if o != nil && !IsNil(o.AppearancePublicCustomJs) {
		return true
	}

	return false
}

// SetAppearancePublicCustomJs gets a reference to the given string and assigns it to the AppearancePublicCustomJs field.
func (o *Settings) SetAppearancePublicCustomJs(v string) {
	o.AppearancePublicCustomJs = &v
}

func (o Settings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Settings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppSiteName) {
		toSerialize["app.site_name"] = o.AppSiteName
	}
	if !IsNil(o.AppRootUrl) {
		toSerialize["app.root_url"] = o.AppRootUrl
	}
	if !IsNil(o.AppLogoUrl) {
		toSerialize["app.logo_url"] = o.AppLogoUrl
	}
	if !IsNil(o.AppFaviconUrl) {
		toSerialize["app.favicon_url"] = o.AppFaviconUrl
	}
	if !IsNil(o.AppFromEmail) {
		toSerialize["app.from_email"] = o.AppFromEmail
	}
	if !IsNil(o.AppNotifyEmails) {
		toSerialize["app.notify_emails"] = o.AppNotifyEmails
	}
	if !IsNil(o.AppEnablePublicSubscriptionPage) {
		toSerialize["app.enable_public_subscription_page"] = o.AppEnablePublicSubscriptionPage
	}
	if !IsNil(o.AppEnablePublicArchive) {
		toSerialize["app.enable_public_archive"] = o.AppEnablePublicArchive
	}
	if !IsNil(o.AppSendOptinConfirmation) {
		toSerialize["app.send_optin_confirmation"] = o.AppSendOptinConfirmation
	}
	if !IsNil(o.AppCheckUpdates) {
		toSerialize["app.check_updates"] = o.AppCheckUpdates
	}
	if !IsNil(o.AppLang) {
		toSerialize["app.lang"] = o.AppLang
	}
	if !IsNil(o.AppBatchSize) {
		toSerialize["app.batch_size"] = o.AppBatchSize
	}
	if !IsNil(o.AppConcurrency) {
		toSerialize["app.concurrency"] = o.AppConcurrency
	}
	if !IsNil(o.AppMaxSendErrors) {
		toSerialize["app.max_send_errors"] = o.AppMaxSendErrors
	}
	if !IsNil(o.AppMessageRate) {
		toSerialize["app.message_rate"] = o.AppMessageRate
	}
	if !IsNil(o.AppMessageSlidingWindow) {
		toSerialize["app.message_sliding_window"] = o.AppMessageSlidingWindow
	}
	if !IsNil(o.AppMessageSlidingWindowDuration) {
		toSerialize["app.message_sliding_window_duration"] = o.AppMessageSlidingWindowDuration
	}
	if !IsNil(o.AppMessageSlidingWindowRate) {
		toSerialize["app.message_sliding_window_rate"] = o.AppMessageSlidingWindowRate
	}
	if !IsNil(o.PrivacyIndividualTracking) {
		toSerialize["privacy.individual_tracking"] = o.PrivacyIndividualTracking
	}
	if !IsNil(o.PrivacyUnsubscribeHeader) {
		toSerialize["privacy.unsubscribe_header"] = o.PrivacyUnsubscribeHeader
	}
	if !IsNil(o.PrivacyAllowBlocklist) {
		toSerialize["privacy.allow_blocklist"] = o.PrivacyAllowBlocklist
	}
	if !IsNil(o.PrivacyAllowPreferences) {
		toSerialize["privacy.allow_preferences"] = o.PrivacyAllowPreferences
	}
	if !IsNil(o.PrivacyAllowExport) {
		toSerialize["privacy.allow_export"] = o.PrivacyAllowExport
	}
	if !IsNil(o.PrivacyAllowWipe) {
		toSerialize["privacy.allow_wipe"] = o.PrivacyAllowWipe
	}
	if !IsNil(o.PrivacyExportable) {
		toSerialize["privacy.exportable"] = o.PrivacyExportable
	}
	if !IsNil(o.PrivacyDomainBlocklist) {
		toSerialize["privacy.domain_blocklist"] = o.PrivacyDomainBlocklist
	}
	if !IsNil(o.UploadProvider) {
		toSerialize["upload.provider"] = o.UploadProvider
	}
	if !IsNil(o.UploadFilesystemUploadPath) {
		toSerialize["upload.filesystem.upload_path"] = o.UploadFilesystemUploadPath
	}
	if !IsNil(o.UploadFilesystemUploadUri) {
		toSerialize["upload.filesystem.upload_uri"] = o.UploadFilesystemUploadUri
	}
	if !IsNil(o.UploadS3Url) {
		toSerialize["upload.s3.url"] = o.UploadS3Url
	}
	if !IsNil(o.UploadS3PublicUrl) {
		toSerialize["upload.s3.public_url"] = o.UploadS3PublicUrl
	}
	if !IsNil(o.UploadS3AwsAccessKeyId) {
		toSerialize["upload.s3.aws_access_key_id"] = o.UploadS3AwsAccessKeyId
	}
	if !IsNil(o.UploadS3AwsDefaultRegion) {
		toSerialize["upload.s3.aws_default_region"] = o.UploadS3AwsDefaultRegion
	}
	if !IsNil(o.UploadS3Bucket) {
		toSerialize["upload.s3.bucket"] = o.UploadS3Bucket
	}
	if !IsNil(o.UploadS3BucketDomain) {
		toSerialize["upload.s3.bucket_domain"] = o.UploadS3BucketDomain
	}
	if !IsNil(o.UploadS3BucketPath) {
		toSerialize["upload.s3.bucket_path"] = o.UploadS3BucketPath
	}
	if !IsNil(o.UploadS3BucketType) {
		toSerialize["upload.s3.bucket_type"] = o.UploadS3BucketType
	}
	if !IsNil(o.UploadS3Expiry) {
		toSerialize["upload.s3.expiry"] = o.UploadS3Expiry
	}
	if !IsNil(o.Smtp) {
		toSerialize["smtp"] = o.Smtp
	}
	if !IsNil(o.Messengers) {
		toSerialize["messengers"] = o.Messengers
	}
	if !IsNil(o.BounceEnabled) {
		toSerialize["bounce.enabled"] = o.BounceEnabled
	}
	if !IsNil(o.BounceWebhooksEnabled) {
		toSerialize["bounce.webhooks_enabled"] = o.BounceWebhooksEnabled
	}
	if !IsNil(o.BounceCount) {
		toSerialize["bounce.count"] = o.BounceCount
	}
	if !IsNil(o.BounceAction) {
		toSerialize["bounce.action"] = o.BounceAction
	}
	if !IsNil(o.BounceSesEnabled) {
		toSerialize["bounce.ses_enabled"] = o.BounceSesEnabled
	}
	if !IsNil(o.BounceSendgridEnabled) {
		toSerialize["bounce.sendgrid_enabled"] = o.BounceSendgridEnabled
	}
	if !IsNil(o.BounceSendgridKey) {
		toSerialize["bounce.sendgrid_key"] = o.BounceSendgridKey
	}
	if !IsNil(o.BounceMailboxes) {
		toSerialize["bounce.mailboxes"] = o.BounceMailboxes
	}
	if !IsNil(o.AppearanceAdminCustomCss) {
		toSerialize["appearance.admin.custom_css"] = o.AppearanceAdminCustomCss
	}
	if !IsNil(o.AppearanceAdminCustomJs) {
		toSerialize["appearance.admin.custom_js"] = o.AppearanceAdminCustomJs
	}
	if !IsNil(o.AppearancePublicCustomCss) {
		toSerialize["appearance.public.custom_css"] = o.AppearancePublicCustomCss
	}
	if !IsNil(o.AppearancePublicCustomJs) {
		toSerialize["appearance.public.custom_js"] = o.AppearancePublicCustomJs
	}
	return toSerialize, nil
}

type NullableSettings struct {
	value *Settings
	isSet bool
}

func (v NullableSettings) Get() *Settings {
	return v.value
}

func (v *NullableSettings) Set(val *Settings) {
	v.value = val
	v.isSet = true
}

func (v NullableSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettings(val *Settings) *NullableSettings {
	return &NullableSettings{value: val, isSet: true}
}

func (v NullableSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


