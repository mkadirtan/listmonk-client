/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MaintenanceApiService MaintenanceApi service
type MaintenanceApiService service

type ApiDeleteCampaignAnalyticsByTypeRequest struct {
	ctx context.Context
	ApiService *MaintenanceApiService
	type_ string
	beforeDate *string
}

func (r ApiDeleteCampaignAnalyticsByTypeRequest) BeforeDate(beforeDate string) ApiDeleteCampaignAnalyticsByTypeRequest {
	r.beforeDate = &beforeDate
	return r
}

func (r ApiDeleteCampaignAnalyticsByTypeRequest) Execute() (*GetHealthCheck200Response, *http.Response, error) {
	return r.ApiService.DeleteCampaignAnalyticsByTypeExecute(r)
}

/*
DeleteCampaignAnalyticsByType Method for DeleteCampaignAnalyticsByType

garbage collects (deletes) campaign analytics.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param type_ type of GC collected subscribers
 @return ApiDeleteCampaignAnalyticsByTypeRequest
*/
func (a *MaintenanceApiService) DeleteCampaignAnalyticsByType(ctx context.Context, type_ string) ApiDeleteCampaignAnalyticsByTypeRequest {
	return ApiDeleteCampaignAnalyticsByTypeRequest{
		ApiService: a,
		ctx: ctx,
		type_: type_,
	}
}

// Execute executes the request
//  @return GetHealthCheck200Response
func (a *MaintenanceApiService) DeleteCampaignAnalyticsByTypeExecute(r ApiDeleteCampaignAnalyticsByTypeRequest) (*GetHealthCheck200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHealthCheck200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MaintenanceApiService.DeleteCampaignAnalyticsByType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/maintenance/analytics/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.beforeDate != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "before_date", r.beforeDate, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGCSubscribersRequest struct {
	ctx context.Context
	ApiService *MaintenanceApiService
	type_ string
}

func (r ApiDeleteGCSubscribersRequest) Execute() (*DeleteGCSubscribers200Response, *http.Response, error) {
	return r.ApiService.DeleteGCSubscribersExecute(r)
}

/*
DeleteGCSubscribers Method for DeleteGCSubscribers

garbage collects (deletes) orphaned or blocklisted subscribers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param type_ type of GC collected subscribers
 @return ApiDeleteGCSubscribersRequest
*/
func (a *MaintenanceApiService) DeleteGCSubscribers(ctx context.Context, type_ string) ApiDeleteGCSubscribersRequest {
	return ApiDeleteGCSubscribersRequest{
		ApiService: a,
		ctx: ctx,
		type_: type_,
	}
}

// Execute executes the request
//  @return DeleteGCSubscribers200Response
func (a *MaintenanceApiService) DeleteGCSubscribersExecute(r ApiDeleteGCSubscribersRequest) (*DeleteGCSubscribers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteGCSubscribers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MaintenanceApiService.DeleteGCSubscribers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/maintenance/subscribers/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUnconfirmedSubscriptionsRequest struct {
	ctx context.Context
	ApiService *MaintenanceApiService
	beforeDate *string
}

func (r ApiDeleteUnconfirmedSubscriptionsRequest) BeforeDate(beforeDate string) ApiDeleteUnconfirmedSubscriptionsRequest {
	r.beforeDate = &beforeDate
	return r
}

func (r ApiDeleteUnconfirmedSubscriptionsRequest) Execute() (*DeleteGCSubscribers200Response, *http.Response, error) {
	return r.ApiService.DeleteUnconfirmedSubscriptionsExecute(r)
}

/*
DeleteUnconfirmedSubscriptions Method for DeleteUnconfirmedSubscriptions

garbage collects (deletes) orphaned or blocklisted subscribers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteUnconfirmedSubscriptionsRequest
*/
func (a *MaintenanceApiService) DeleteUnconfirmedSubscriptions(ctx context.Context) ApiDeleteUnconfirmedSubscriptionsRequest {
	return ApiDeleteUnconfirmedSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeleteGCSubscribers200Response
func (a *MaintenanceApiService) DeleteUnconfirmedSubscriptionsExecute(r ApiDeleteUnconfirmedSubscriptionsRequest) (*DeleteGCSubscribers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteGCSubscribers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MaintenanceApiService.DeleteUnconfirmedSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/maintenance/subscriptions/unconfirmed"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.beforeDate != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "before_date", r.beforeDate, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
