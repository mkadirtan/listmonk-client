/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DashboardCountDataLists type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardCountDataLists{}

// DashboardCountDataLists struct for DashboardCountDataLists
type DashboardCountDataLists struct {
	Total *int32 `json:"total,omitempty"`
	Private *int32 `json:"private,omitempty"`
	Public *int32 `json:"public,omitempty"`
	OptinSingle *int32 `json:"optin_single,omitempty"`
	OptinDouble *int32 `json:"optin_double,omitempty"`
}

// NewDashboardCountDataLists instantiates a new DashboardCountDataLists object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardCountDataLists() *DashboardCountDataLists {
	this := DashboardCountDataLists{}
	return &this
}

// NewDashboardCountDataListsWithDefaults instantiates a new DashboardCountDataLists object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardCountDataListsWithDefaults() *DashboardCountDataLists {
	this := DashboardCountDataLists{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DashboardCountDataLists) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardCountDataLists) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DashboardCountDataLists) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *DashboardCountDataLists) SetTotal(v int32) {
	o.Total = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *DashboardCountDataLists) GetPrivate() int32 {
	if o == nil || IsNil(o.Private) {
		var ret int32
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardCountDataLists) GetPrivateOk() (*int32, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *DashboardCountDataLists) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given int32 and assigns it to the Private field.
func (o *DashboardCountDataLists) SetPrivate(v int32) {
	o.Private = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *DashboardCountDataLists) GetPublic() int32 {
	if o == nil || IsNil(o.Public) {
		var ret int32
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardCountDataLists) GetPublicOk() (*int32, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *DashboardCountDataLists) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given int32 and assigns it to the Public field.
func (o *DashboardCountDataLists) SetPublic(v int32) {
	o.Public = &v
}

// GetOptinSingle returns the OptinSingle field value if set, zero value otherwise.
func (o *DashboardCountDataLists) GetOptinSingle() int32 {
	if o == nil || IsNil(o.OptinSingle) {
		var ret int32
		return ret
	}
	return *o.OptinSingle
}

// GetOptinSingleOk returns a tuple with the OptinSingle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardCountDataLists) GetOptinSingleOk() (*int32, bool) {
	if o == nil || IsNil(o.OptinSingle) {
		return nil, false
	}
	return o.OptinSingle, true
}

// HasOptinSingle returns a boolean if a field has been set.
func (o *DashboardCountDataLists) HasOptinSingle() bool {
	if o != nil && !IsNil(o.OptinSingle) {
		return true
	}

	return false
}

// SetOptinSingle gets a reference to the given int32 and assigns it to the OptinSingle field.
func (o *DashboardCountDataLists) SetOptinSingle(v int32) {
	o.OptinSingle = &v
}

// GetOptinDouble returns the OptinDouble field value if set, zero value otherwise.
func (o *DashboardCountDataLists) GetOptinDouble() int32 {
	if o == nil || IsNil(o.OptinDouble) {
		var ret int32
		return ret
	}
	return *o.OptinDouble
}

// GetOptinDoubleOk returns a tuple with the OptinDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardCountDataLists) GetOptinDoubleOk() (*int32, bool) {
	if o == nil || IsNil(o.OptinDouble) {
		return nil, false
	}
	return o.OptinDouble, true
}

// HasOptinDouble returns a boolean if a field has been set.
func (o *DashboardCountDataLists) HasOptinDouble() bool {
	if o != nil && !IsNil(o.OptinDouble) {
		return true
	}

	return false
}

// SetOptinDouble gets a reference to the given int32 and assigns it to the OptinDouble field.
func (o *DashboardCountDataLists) SetOptinDouble(v int32) {
	o.OptinDouble = &v
}

func (o DashboardCountDataLists) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardCountDataLists) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.OptinSingle) {
		toSerialize["optin_single"] = o.OptinSingle
	}
	if !IsNil(o.OptinDouble) {
		toSerialize["optin_double"] = o.OptinDouble
	}
	return toSerialize, nil
}

type NullableDashboardCountDataLists struct {
	value *DashboardCountDataLists
	isSet bool
}

func (v NullableDashboardCountDataLists) Get() *DashboardCountDataLists {
	return v.value
}

func (v *NullableDashboardCountDataLists) Set(val *DashboardCountDataLists) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardCountDataLists) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardCountDataLists) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardCountDataLists(val *DashboardCountDataLists) *NullableDashboardCountDataLists {
	return &NullableDashboardCountDataLists{value: val, isSet: true}
}

func (v NullableDashboardCountDataLists) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardCountDataLists) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


