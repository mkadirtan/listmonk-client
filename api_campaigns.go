/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// CampaignsApiService CampaignsApi service
type CampaignsApiService service

type ApiCreateCampaignRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	campaignRequest *CampaignRequest
}

// new campaign info
func (r ApiCreateCampaignRequest) CampaignRequest(campaignRequest CampaignRequest) ApiCreateCampaignRequest {
	r.campaignRequest = &campaignRequest
	return r
}

func (r ApiCreateCampaignRequest) Execute() (*CreateCampaign200Response, *http.Response, error) {
	return r.ApiService.CreateCampaignExecute(r)
}

/*
CreateCampaign Method for CreateCampaign

handles campaign creation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCampaignRequest
*/
func (a *CampaignsApiService) CreateCampaign(ctx context.Context) ApiCreateCampaignRequest {
	return ApiCreateCampaignRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateCampaign200Response
func (a *CampaignsApiService) CreateCampaignExecute(r ApiCreateCampaignRequest) (*CreateCampaign200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateCampaign200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.CreateCampaign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.campaignRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCampaignContentByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
	campaignContentRequest *CampaignContentRequest
}

// updated campaign content
func (r ApiCreateCampaignContentByIdRequest) CampaignContentRequest(campaignContentRequest CampaignContentRequest) ApiCreateCampaignContentByIdRequest {
	r.campaignContentRequest = &campaignContentRequest
	return r
}

func (r ApiCreateCampaignContentByIdRequest) Execute() (*GetImportSubscriberStats200Response, *http.Response, error) {
	return r.ApiService.CreateCampaignContentByIdExecute(r)
}

/*
CreateCampaignContentById Method for CreateCampaignContentById

handles campaign content (body) format conversions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of campaign that you choose to create content
 @return ApiCreateCampaignContentByIdRequest
*/
func (a *CampaignsApiService) CreateCampaignContentById(ctx context.Context, id int32) ApiCreateCampaignContentByIdRequest {
	return ApiCreateCampaignContentByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetImportSubscriberStats200Response
func (a *CampaignsApiService) CreateCampaignContentByIdExecute(r ApiCreateCampaignContentByIdRequest) (*GetImportSubscriberStats200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetImportSubscriberStats200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.CreateCampaignContentById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.campaignContentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCampaignByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
}

func (r ApiDeleteCampaignByIdRequest) Execute() (*GetHealthCheck200Response, *http.Response, error) {
	return r.ApiService.DeleteCampaignByIdExecute(r)
}

/*
DeleteCampaignById Method for DeleteCampaignById

deletes specified campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id value of the campaign you want to get.
 @return ApiDeleteCampaignByIdRequest
*/
func (a *CampaignsApiService) DeleteCampaignById(ctx context.Context, id int32) ApiDeleteCampaignByIdRequest {
	return ApiDeleteCampaignByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetHealthCheck200Response
func (a *CampaignsApiService) DeleteCampaignByIdExecute(r ApiDeleteCampaignByIdRequest) (*GetHealthCheck200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHealthCheck200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.DeleteCampaignById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCampaignAnalyticsRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	type_ string
	from *string
	to *string
	id *string
}

// start value of date range
func (r ApiGetCampaignAnalyticsRequest) From(from string) ApiGetCampaignAnalyticsRequest {
	r.from = &from
	return r
}

// end value of date range
func (r ApiGetCampaignAnalyticsRequest) To(to string) ApiGetCampaignAnalyticsRequest {
	r.to = &to
	return r
}

// campaign id/s to retrive view counts
func (r ApiGetCampaignAnalyticsRequest) Id(id string) ApiGetCampaignAnalyticsRequest {
	r.id = &id
	return r
}

func (r ApiGetCampaignAnalyticsRequest) Execute() (*GetCampaignAnalytics200Response, *http.Response, error) {
	return r.ApiService.GetCampaignAnalyticsExecute(r)
}

/*
GetCampaignAnalytics Method for GetCampaignAnalytics

retrieves view counts for a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param type_ type of stats, either links, view, click or bounce
 @return ApiGetCampaignAnalyticsRequest
*/
func (a *CampaignsApiService) GetCampaignAnalytics(ctx context.Context, type_ string) ApiGetCampaignAnalyticsRequest {
	return ApiGetCampaignAnalyticsRequest{
		ApiService: a,
		ctx: ctx,
		type_: type_,
	}
}

// Execute executes the request
//  @return GetCampaignAnalytics200Response
func (a *CampaignsApiService) GetCampaignAnalyticsExecute(r ApiGetCampaignAnalyticsRequest) (*GetCampaignAnalytics200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCampaignAnalytics200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.GetCampaignAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/analytics/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.from == nil {
		return localVarReturnValue, nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return localVarReturnValue, nil, reportError("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCampaignByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
	noBody *bool
}

// boolean flag for response with/without body
func (r ApiGetCampaignByIdRequest) NoBody(noBody bool) ApiGetCampaignByIdRequest {
	r.noBody = &noBody
	return r
}

func (r ApiGetCampaignByIdRequest) Execute() (*GetCampaignById200Response, *http.Response, error) {
	return r.ApiService.GetCampaignByIdExecute(r)
}

/*
GetCampaignById Method for GetCampaignById

handles retrieval of campaigns.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id value of the campaign you want to get.
 @return ApiGetCampaignByIdRequest
*/
func (a *CampaignsApiService) GetCampaignById(ctx context.Context, id int32) ApiGetCampaignByIdRequest {
	return ApiGetCampaignByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetCampaignById200Response
func (a *CampaignsApiService) GetCampaignByIdExecute(r ApiGetCampaignByIdRequest) (*GetCampaignById200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCampaignById200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.GetCampaignById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.noBody != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "no_body", r.noBody, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCampaignsRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	status *[]string
	noBody *bool
	page *int32
	perPage *int32
	query *string
	orderBy *string
	order *string
}

// status flag of campaign
func (r ApiGetCampaignsRequest) Status(status []string) ApiGetCampaignsRequest {
	r.status = &status
	return r
}

// boolean flag for response with/without body
func (r ApiGetCampaignsRequest) NoBody(noBody bool) ApiGetCampaignsRequest {
	r.noBody = &noBody
	return r
}

// total number of pages
func (r ApiGetCampaignsRequest) Page(page int32) ApiGetCampaignsRequest {
	r.page = &page
	return r
}

// number of items per page
func (r ApiGetCampaignsRequest) PerPage(perPage int32) ApiGetCampaignsRequest {
	r.perPage = &perPage
	return r
}

// Optional string to search a list by name.
func (r ApiGetCampaignsRequest) Query(query string) ApiGetCampaignsRequest {
	r.query = &query
	return r
}

// Field to sort results by. name|status|created_at|updated_at
func (r ApiGetCampaignsRequest) OrderBy(orderBy string) ApiGetCampaignsRequest {
	r.orderBy = &orderBy
	return r
}

// ASC|DESC Sort by ascending or descending order.
func (r ApiGetCampaignsRequest) Order(order string) ApiGetCampaignsRequest {
	r.order = &order
	return r
}

func (r ApiGetCampaignsRequest) Execute() (*GetCampaigns200Response, *http.Response, error) {
	return r.ApiService.GetCampaignsExecute(r)
}

/*
GetCampaigns Method for GetCampaigns

handles retrieval of campaigns

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCampaignsRequest
*/
func (a *CampaignsApiService) GetCampaigns(ctx context.Context) ApiGetCampaignsRequest {
	return ApiGetCampaignsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetCampaigns200Response
func (a *CampaignsApiService) GetCampaignsExecute(r ApiGetCampaignsRequest) (*GetCampaigns200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCampaigns200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.GetCampaigns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.noBody != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "no_body", r.noBody, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "query", r.query, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "order_by", r.orderBy, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "order", r.order, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRunningCampaignStatsRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
}

func (r ApiGetRunningCampaignStatsRequest) Execute() (*GetRunningCampaignStats200Response, *http.Response, error) {
	return r.ApiService.GetRunningCampaignStatsExecute(r)
}

/*
GetRunningCampaignStats Method for GetRunningCampaignStats

returns stats of a given set of campaign IDs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRunningCampaignStatsRequest
*/
func (a *CampaignsApiService) GetRunningCampaignStats(ctx context.Context) ApiGetRunningCampaignStatsRequest {
	return ApiGetRunningCampaignStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetRunningCampaignStats200Response
func (a *CampaignsApiService) GetRunningCampaignStatsExecute(r ApiGetRunningCampaignStatsRequest) (*GetRunningCampaignStats200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRunningCampaignStats200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.GetRunningCampaignStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/running/stats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreviewCampaignByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
	templateId *int32
}

// template id
func (r ApiPreviewCampaignByIdRequest) TemplateId(templateId int32) ApiPreviewCampaignByIdRequest {
	r.templateId = &templateId
	return r
}

func (r ApiPreviewCampaignByIdRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.PreviewCampaignByIdExecute(r)
}

/*
PreviewCampaignById Method for PreviewCampaignById

renders the HTML preview of a campaign body

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id value of the campaign you want to get the preview of
 @return ApiPreviewCampaignByIdRequest
*/
func (a *CampaignsApiService) PreviewCampaignById(ctx context.Context, id int32) ApiPreviewCampaignByIdRequest {
	return ApiPreviewCampaignByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *CampaignsApiService) PreviewCampaignByIdExecute(r ApiPreviewCampaignByIdRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.PreviewCampaignById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}/preview"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.templateId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "template_id", r.templateId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreviewCampaignTextByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
	templateId *int32
	contentType *string
	body *string
}

// template id
func (r ApiPreviewCampaignTextByIdRequest) TemplateId(templateId int32) ApiPreviewCampaignTextByIdRequest {
	r.templateId = &templateId
	return r
}

// content type
func (r ApiPreviewCampaignTextByIdRequest) ContentType(contentType string) ApiPreviewCampaignTextByIdRequest {
	r.contentType = &contentType
	return r
}

// campaign body
func (r ApiPreviewCampaignTextByIdRequest) Body(body string) ApiPreviewCampaignTextByIdRequest {
	r.body = &body
	return r
}

func (r ApiPreviewCampaignTextByIdRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.PreviewCampaignTextByIdExecute(r)
}

/*
PreviewCampaignTextById Method for PreviewCampaignTextById

renders the HTML preview of a campaign body

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id value of the campaign you want to get the preview of
 @return ApiPreviewCampaignTextByIdRequest
*/
func (a *CampaignsApiService) PreviewCampaignTextById(ctx context.Context, id int32) ApiPreviewCampaignTextByIdRequest {
	return ApiPreviewCampaignTextByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *CampaignsApiService) PreviewCampaignTextByIdExecute(r ApiPreviewCampaignTextByIdRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.PreviewCampaignTextById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}/text"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.templateId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "template_id", r.templateId, "")
	}
	if r.contentType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "content_type", r.contentType, "")
	}
	if r.body != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "body", r.body, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTestCampaignByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
	templateId *int32
}

// template id
func (r ApiTestCampaignByIdRequest) TemplateId(templateId int32) ApiTestCampaignByIdRequest {
	r.templateId = &templateId
	return r
}

func (r ApiTestCampaignByIdRequest) Execute() (*GetHealthCheck200Response, *http.Response, error) {
	return r.ApiService.TestCampaignByIdExecute(r)
}

/*
TestCampaignById Method for TestCampaignById

handles sending of campaign message to arbitrary subscribers for testing

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of campaign that you want to test
 @return ApiTestCampaignByIdRequest
*/
func (a *CampaignsApiService) TestCampaignById(ctx context.Context, id int32) ApiTestCampaignByIdRequest {
	return ApiTestCampaignByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetHealthCheck200Response
func (a *CampaignsApiService) TestCampaignByIdExecute(r ApiTestCampaignByIdRequest) (*GetHealthCheck200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHealthCheck200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.TestCampaignById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}/test"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.templateId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "template_id", r.templateId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCampaignArchiveByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
	updateCampaignArchiveByIdRequest *UpdateCampaignArchiveByIdRequest
}

// archive campaign related parameters
func (r ApiUpdateCampaignArchiveByIdRequest) UpdateCampaignArchiveByIdRequest(updateCampaignArchiveByIdRequest UpdateCampaignArchiveByIdRequest) ApiUpdateCampaignArchiveByIdRequest {
	r.updateCampaignArchiveByIdRequest = &updateCampaignArchiveByIdRequest
	return r
}

func (r ApiUpdateCampaignArchiveByIdRequest) Execute() (*GetHealthCheck200Response, *http.Response, error) {
	return r.ApiService.UpdateCampaignArchiveByIdExecute(r)
}

/*
UpdateCampaignArchiveById Method for UpdateCampaignArchiveById

handles campaign status modification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id value of the campaign you want to get the preview of
 @return ApiUpdateCampaignArchiveByIdRequest
*/
func (a *CampaignsApiService) UpdateCampaignArchiveById(ctx context.Context, id int32) ApiUpdateCampaignArchiveByIdRequest {
	return ApiUpdateCampaignArchiveByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetHealthCheck200Response
func (a *CampaignsApiService) UpdateCampaignArchiveByIdExecute(r ApiUpdateCampaignArchiveByIdRequest) (*GetHealthCheck200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetHealthCheck200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.UpdateCampaignArchiveById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}/archive"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateCampaignArchiveByIdRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCampaignByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
	campaignRequest *CampaignRequest
}

// updated campaign fields
func (r ApiUpdateCampaignByIdRequest) CampaignRequest(campaignRequest CampaignRequest) ApiUpdateCampaignByIdRequest {
	r.campaignRequest = &campaignRequest
	return r
}

func (r ApiUpdateCampaignByIdRequest) Execute() (*CreateCampaign200Response, *http.Response, error) {
	return r.ApiService.UpdateCampaignByIdExecute(r)
}

/*
UpdateCampaignById Method for UpdateCampaignById

handle updation of campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id value of campaign you want to update
 @return ApiUpdateCampaignByIdRequest
*/
func (a *CampaignsApiService) UpdateCampaignById(ctx context.Context, id int32) ApiUpdateCampaignByIdRequest {
	return ApiUpdateCampaignByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateCampaign200Response
func (a *CampaignsApiService) UpdateCampaignByIdExecute(r ApiUpdateCampaignByIdRequest) (*CreateCampaign200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateCampaign200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.UpdateCampaignById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.campaignRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCampaignStatusByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
	updateCampaignStatusByIdRequest *UpdateCampaignStatusByIdRequest
}

// campaign status update
func (r ApiUpdateCampaignStatusByIdRequest) UpdateCampaignStatusByIdRequest(updateCampaignStatusByIdRequest UpdateCampaignStatusByIdRequest) ApiUpdateCampaignStatusByIdRequest {
	r.updateCampaignStatusByIdRequest = &updateCampaignStatusByIdRequest
	return r
}

func (r ApiUpdateCampaignStatusByIdRequest) Execute() (*GetCampaignById200Response, *http.Response, error) {
	return r.ApiService.UpdateCampaignStatusByIdExecute(r)
}

/*
UpdateCampaignStatusById Method for UpdateCampaignStatusById

handles campaign status modification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id value of the campaign you want to get the preview of
 @return ApiUpdateCampaignStatusByIdRequest
*/
func (a *CampaignsApiService) UpdateCampaignStatusById(ctx context.Context, id int32) ApiUpdateCampaignStatusByIdRequest {
	return ApiUpdateCampaignStatusByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetCampaignById200Response
func (a *CampaignsApiService) UpdateCampaignStatusByIdExecute(r ApiUpdateCampaignStatusByIdRequest) (*GetCampaignById200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCampaignById200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.UpdateCampaignStatusById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateCampaignStatusByIdRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePreviewCampaignByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsApiService
	id int32
	templateId *int32
	contentType *string
	body *string
}

// template id
func (r ApiUpdatePreviewCampaignByIdRequest) TemplateId(templateId int32) ApiUpdatePreviewCampaignByIdRequest {
	r.templateId = &templateId
	return r
}

// content type
func (r ApiUpdatePreviewCampaignByIdRequest) ContentType(contentType string) ApiUpdatePreviewCampaignByIdRequest {
	r.contentType = &contentType
	return r
}

// template body
func (r ApiUpdatePreviewCampaignByIdRequest) Body(body string) ApiUpdatePreviewCampaignByIdRequest {
	r.body = &body
	return r
}

func (r ApiUpdatePreviewCampaignByIdRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.UpdatePreviewCampaignByIdExecute(r)
}

/*
UpdatePreviewCampaignById Method for UpdatePreviewCampaignById

renders the HTML preview of a campaign body

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id value of the campaign you want to get the preview of
 @return ApiUpdatePreviewCampaignByIdRequest
*/
func (a *CampaignsApiService) UpdatePreviewCampaignById(ctx context.Context, id int32) ApiUpdatePreviewCampaignByIdRequest {
	return ApiUpdatePreviewCampaignByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *CampaignsApiService) UpdatePreviewCampaignByIdExecute(r ApiUpdatePreviewCampaignByIdRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsApiService.UpdatePreviewCampaignById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{id}/preview"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.templateId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "template_id", r.templateId, "")
	}
	if r.contentType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "content_type", r.contentType, "")
	}
	if r.body != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "body", r.body, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
