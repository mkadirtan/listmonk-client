/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NewSubscriberAttribs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewSubscriberAttribs{}

// NewSubscriberAttribs struct for NewSubscriberAttribs
type NewSubscriberAttribs struct {
	City *string `json:"city,omitempty"`
	Projects *int32 `json:"projects,omitempty"`
	Stack *NewSubscriberAttribsStack `json:"stack,omitempty"`
}

// NewNewSubscriberAttribs instantiates a new NewSubscriberAttribs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewSubscriberAttribs() *NewSubscriberAttribs {
	this := NewSubscriberAttribs{}
	return &this
}

// NewNewSubscriberAttribsWithDefaults instantiates a new NewSubscriberAttribs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewSubscriberAttribsWithDefaults() *NewSubscriberAttribs {
	this := NewSubscriberAttribs{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *NewSubscriberAttribs) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewSubscriberAttribs) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *NewSubscriberAttribs) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *NewSubscriberAttribs) SetCity(v string) {
	o.City = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *NewSubscriberAttribs) GetProjects() int32 {
	if o == nil || IsNil(o.Projects) {
		var ret int32
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewSubscriberAttribs) GetProjectsOk() (*int32, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *NewSubscriberAttribs) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given int32 and assigns it to the Projects field.
func (o *NewSubscriberAttribs) SetProjects(v int32) {
	o.Projects = &v
}

// GetStack returns the Stack field value if set, zero value otherwise.
func (o *NewSubscriberAttribs) GetStack() NewSubscriberAttribsStack {
	if o == nil || IsNil(o.Stack) {
		var ret NewSubscriberAttribsStack
		return ret
	}
	return *o.Stack
}

// GetStackOk returns a tuple with the Stack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewSubscriberAttribs) GetStackOk() (*NewSubscriberAttribsStack, bool) {
	if o == nil || IsNil(o.Stack) {
		return nil, false
	}
	return o.Stack, true
}

// HasStack returns a boolean if a field has been set.
func (o *NewSubscriberAttribs) HasStack() bool {
	if o != nil && !IsNil(o.Stack) {
		return true
	}

	return false
}

// SetStack gets a reference to the given NewSubscriberAttribsStack and assigns it to the Stack field.
func (o *NewSubscriberAttribs) SetStack(v NewSubscriberAttribsStack) {
	o.Stack = &v
}

func (o NewSubscriberAttribs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewSubscriberAttribs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.Stack) {
		toSerialize["stack"] = o.Stack
	}
	return toSerialize, nil
}

type NullableNewSubscriberAttribs struct {
	value *NewSubscriberAttribs
	isSet bool
}

func (v NullableNewSubscriberAttribs) Get() *NewSubscriberAttribs {
	return v.value
}

func (v *NullableNewSubscriberAttribs) Set(val *NewSubscriberAttribs) {
	v.value = val
	v.isSet = true
}

func (v NullableNewSubscriberAttribs) IsSet() bool {
	return v.isSet
}

func (v *NullableNewSubscriberAttribs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewSubscriberAttribs(val *NewSubscriberAttribs) *NullableNewSubscriberAttribs {
	return &NullableNewSubscriberAttribs{value: val, isSet: true}
}

func (v NullableNewSubscriberAttribs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewSubscriberAttribs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


