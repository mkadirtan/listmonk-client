/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SMTPTest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMTPTest{}

// SMTPTest struct for SMTPTest
type SMTPTest struct {
	Uuid *string `json:"uuid,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Host *string `json:"host,omitempty"`
	HelloHostname *string `json:"hello_hostname,omitempty"`
	Port *int32 `json:"port,omitempty"`
	AuthProtocol *string `json:"auth_protocol,omitempty"`
	Username *string `json:"username,omitempty"`
	EmailHeaders []map[string]interface{} `json:"email_headers,omitempty"`
	MaxConns *int32 `json:"max_conns,omitempty"`
	MaxMsgRetries *int32 `json:"max_msg_retries,omitempty"`
	IdleTimeout *string `json:"idle_timeout,omitempty"`
	WaitTimeout *string `json:"wait_timeout,omitempty"`
	TlsType *string `json:"tls_type,omitempty"`
	TlsSkipVerify *bool `json:"tls_skip_verify,omitempty"`
	StrEmailHeaders *string `json:"strEmailHeaders,omitempty"`
	Password *string `json:"password,omitempty"`
	Email *string `json:"email,omitempty"`
}

// NewSMTPTest instantiates a new SMTPTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMTPTest() *SMTPTest {
	this := SMTPTest{}
	return &this
}

// NewSMTPTestWithDefaults instantiates a new SMTPTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMTPTestWithDefaults() *SMTPTest {
	this := SMTPTest{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SMTPTest) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SMTPTest) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SMTPTest) SetUuid(v string) {
	o.Uuid = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SMTPTest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SMTPTest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SMTPTest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *SMTPTest) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *SMTPTest) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *SMTPTest) SetHost(v string) {
	o.Host = &v
}

// GetHelloHostname returns the HelloHostname field value if set, zero value otherwise.
func (o *SMTPTest) GetHelloHostname() string {
	if o == nil || IsNil(o.HelloHostname) {
		var ret string
		return ret
	}
	return *o.HelloHostname
}

// GetHelloHostnameOk returns a tuple with the HelloHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetHelloHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.HelloHostname) {
		return nil, false
	}
	return o.HelloHostname, true
}

// HasHelloHostname returns a boolean if a field has been set.
func (o *SMTPTest) HasHelloHostname() bool {
	if o != nil && !IsNil(o.HelloHostname) {
		return true
	}

	return false
}

// SetHelloHostname gets a reference to the given string and assigns it to the HelloHostname field.
func (o *SMTPTest) SetHelloHostname(v string) {
	o.HelloHostname = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SMTPTest) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SMTPTest) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *SMTPTest) SetPort(v int32) {
	o.Port = &v
}

// GetAuthProtocol returns the AuthProtocol field value if set, zero value otherwise.
func (o *SMTPTest) GetAuthProtocol() string {
	if o == nil || IsNil(o.AuthProtocol) {
		var ret string
		return ret
	}
	return *o.AuthProtocol
}

// GetAuthProtocolOk returns a tuple with the AuthProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetAuthProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.AuthProtocol) {
		return nil, false
	}
	return o.AuthProtocol, true
}

// HasAuthProtocol returns a boolean if a field has been set.
func (o *SMTPTest) HasAuthProtocol() bool {
	if o != nil && !IsNil(o.AuthProtocol) {
		return true
	}

	return false
}

// SetAuthProtocol gets a reference to the given string and assigns it to the AuthProtocol field.
func (o *SMTPTest) SetAuthProtocol(v string) {
	o.AuthProtocol = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SMTPTest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SMTPTest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SMTPTest) SetUsername(v string) {
	o.Username = &v
}

// GetEmailHeaders returns the EmailHeaders field value if set, zero value otherwise.
func (o *SMTPTest) GetEmailHeaders() []map[string]interface{} {
	if o == nil || IsNil(o.EmailHeaders) {
		var ret []map[string]interface{}
		return ret
	}
	return o.EmailHeaders
}

// GetEmailHeadersOk returns a tuple with the EmailHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetEmailHeadersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.EmailHeaders) {
		return nil, false
	}
	return o.EmailHeaders, true
}

// HasEmailHeaders returns a boolean if a field has been set.
func (o *SMTPTest) HasEmailHeaders() bool {
	if o != nil && !IsNil(o.EmailHeaders) {
		return true
	}

	return false
}

// SetEmailHeaders gets a reference to the given []map[string]interface{} and assigns it to the EmailHeaders field.
func (o *SMTPTest) SetEmailHeaders(v []map[string]interface{}) {
	o.EmailHeaders = v
}

// GetMaxConns returns the MaxConns field value if set, zero value otherwise.
func (o *SMTPTest) GetMaxConns() int32 {
	if o == nil || IsNil(o.MaxConns) {
		var ret int32
		return ret
	}
	return *o.MaxConns
}

// GetMaxConnsOk returns a tuple with the MaxConns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetMaxConnsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxConns) {
		return nil, false
	}
	return o.MaxConns, true
}

// HasMaxConns returns a boolean if a field has been set.
func (o *SMTPTest) HasMaxConns() bool {
	if o != nil && !IsNil(o.MaxConns) {
		return true
	}

	return false
}

// SetMaxConns gets a reference to the given int32 and assigns it to the MaxConns field.
func (o *SMTPTest) SetMaxConns(v int32) {
	o.MaxConns = &v
}

// GetMaxMsgRetries returns the MaxMsgRetries field value if set, zero value otherwise.
func (o *SMTPTest) GetMaxMsgRetries() int32 {
	if o == nil || IsNil(o.MaxMsgRetries) {
		var ret int32
		return ret
	}
	return *o.MaxMsgRetries
}

// GetMaxMsgRetriesOk returns a tuple with the MaxMsgRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetMaxMsgRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMsgRetries) {
		return nil, false
	}
	return o.MaxMsgRetries, true
}

// HasMaxMsgRetries returns a boolean if a field has been set.
func (o *SMTPTest) HasMaxMsgRetries() bool {
	if o != nil && !IsNil(o.MaxMsgRetries) {
		return true
	}

	return false
}

// SetMaxMsgRetries gets a reference to the given int32 and assigns it to the MaxMsgRetries field.
func (o *SMTPTest) SetMaxMsgRetries(v int32) {
	o.MaxMsgRetries = &v
}

// GetIdleTimeout returns the IdleTimeout field value if set, zero value otherwise.
func (o *SMTPTest) GetIdleTimeout() string {
	if o == nil || IsNil(o.IdleTimeout) {
		var ret string
		return ret
	}
	return *o.IdleTimeout
}

// GetIdleTimeoutOk returns a tuple with the IdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetIdleTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.IdleTimeout) {
		return nil, false
	}
	return o.IdleTimeout, true
}

// HasIdleTimeout returns a boolean if a field has been set.
func (o *SMTPTest) HasIdleTimeout() bool {
	if o != nil && !IsNil(o.IdleTimeout) {
		return true
	}

	return false
}

// SetIdleTimeout gets a reference to the given string and assigns it to the IdleTimeout field.
func (o *SMTPTest) SetIdleTimeout(v string) {
	o.IdleTimeout = &v
}

// GetWaitTimeout returns the WaitTimeout field value if set, zero value otherwise.
func (o *SMTPTest) GetWaitTimeout() string {
	if o == nil || IsNil(o.WaitTimeout) {
		var ret string
		return ret
	}
	return *o.WaitTimeout
}

// GetWaitTimeoutOk returns a tuple with the WaitTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetWaitTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.WaitTimeout) {
		return nil, false
	}
	return o.WaitTimeout, true
}

// HasWaitTimeout returns a boolean if a field has been set.
func (o *SMTPTest) HasWaitTimeout() bool {
	if o != nil && !IsNil(o.WaitTimeout) {
		return true
	}

	return false
}

// SetWaitTimeout gets a reference to the given string and assigns it to the WaitTimeout field.
func (o *SMTPTest) SetWaitTimeout(v string) {
	o.WaitTimeout = &v
}

// GetTlsType returns the TlsType field value if set, zero value otherwise.
func (o *SMTPTest) GetTlsType() string {
	if o == nil || IsNil(o.TlsType) {
		var ret string
		return ret
	}
	return *o.TlsType
}

// GetTlsTypeOk returns a tuple with the TlsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetTlsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TlsType) {
		return nil, false
	}
	return o.TlsType, true
}

// HasTlsType returns a boolean if a field has been set.
func (o *SMTPTest) HasTlsType() bool {
	if o != nil && !IsNil(o.TlsType) {
		return true
	}

	return false
}

// SetTlsType gets a reference to the given string and assigns it to the TlsType field.
func (o *SMTPTest) SetTlsType(v string) {
	o.TlsType = &v
}

// GetTlsSkipVerify returns the TlsSkipVerify field value if set, zero value otherwise.
func (o *SMTPTest) GetTlsSkipVerify() bool {
	if o == nil || IsNil(o.TlsSkipVerify) {
		var ret bool
		return ret
	}
	return *o.TlsSkipVerify
}

// GetTlsSkipVerifyOk returns a tuple with the TlsSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetTlsSkipVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsSkipVerify) {
		return nil, false
	}
	return o.TlsSkipVerify, true
}

// HasTlsSkipVerify returns a boolean if a field has been set.
func (o *SMTPTest) HasTlsSkipVerify() bool {
	if o != nil && !IsNil(o.TlsSkipVerify) {
		return true
	}

	return false
}

// SetTlsSkipVerify gets a reference to the given bool and assigns it to the TlsSkipVerify field.
func (o *SMTPTest) SetTlsSkipVerify(v bool) {
	o.TlsSkipVerify = &v
}

// GetStrEmailHeaders returns the StrEmailHeaders field value if set, zero value otherwise.
func (o *SMTPTest) GetStrEmailHeaders() string {
	if o == nil || IsNil(o.StrEmailHeaders) {
		var ret string
		return ret
	}
	return *o.StrEmailHeaders
}

// GetStrEmailHeadersOk returns a tuple with the StrEmailHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetStrEmailHeadersOk() (*string, bool) {
	if o == nil || IsNil(o.StrEmailHeaders) {
		return nil, false
	}
	return o.StrEmailHeaders, true
}

// HasStrEmailHeaders returns a boolean if a field has been set.
func (o *SMTPTest) HasStrEmailHeaders() bool {
	if o != nil && !IsNil(o.StrEmailHeaders) {
		return true
	}

	return false
}

// SetStrEmailHeaders gets a reference to the given string and assigns it to the StrEmailHeaders field.
func (o *SMTPTest) SetStrEmailHeaders(v string) {
	o.StrEmailHeaders = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SMTPTest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SMTPTest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SMTPTest) SetPassword(v string) {
	o.Password = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SMTPTest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMTPTest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SMTPTest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SMTPTest) SetEmail(v string) {
	o.Email = &v
}

func (o SMTPTest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMTPTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.HelloHostname) {
		toSerialize["hello_hostname"] = o.HelloHostname
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.AuthProtocol) {
		toSerialize["auth_protocol"] = o.AuthProtocol
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.EmailHeaders) {
		toSerialize["email_headers"] = o.EmailHeaders
	}
	if !IsNil(o.MaxConns) {
		toSerialize["max_conns"] = o.MaxConns
	}
	if !IsNil(o.MaxMsgRetries) {
		toSerialize["max_msg_retries"] = o.MaxMsgRetries
	}
	if !IsNil(o.IdleTimeout) {
		toSerialize["idle_timeout"] = o.IdleTimeout
	}
	if !IsNil(o.WaitTimeout) {
		toSerialize["wait_timeout"] = o.WaitTimeout
	}
	if !IsNil(o.TlsType) {
		toSerialize["tls_type"] = o.TlsType
	}
	if !IsNil(o.TlsSkipVerify) {
		toSerialize["tls_skip_verify"] = o.TlsSkipVerify
	}
	if !IsNil(o.StrEmailHeaders) {
		toSerialize["strEmailHeaders"] = o.StrEmailHeaders
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableSMTPTest struct {
	value *SMTPTest
	isSet bool
}

func (v NullableSMTPTest) Get() *SMTPTest {
	return v.value
}

func (v *NullableSMTPTest) Set(val *SMTPTest) {
	v.value = val
	v.isSet = true
}

func (v NullableSMTPTest) IsSet() bool {
	return v.isSet
}

func (v *NullableSMTPTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMTPTest(val *SMTPTest) *NullableSMTPTest {
	return &NullableSMTPTest{value: val, isSet: true}
}

func (v NullableSMTPTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMTPTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


