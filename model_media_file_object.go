/*
Listmonk

The API collection for listmonk

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MediaFileObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaFileObject{}

// MediaFileObject struct for MediaFileObject
type MediaFileObject struct {
	Id *int32 `json:"id,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Filename *string `json:"filename,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	ThumbUrl *string `json:"thumb_url,omitempty"`
	Uri *string `json:"uri,omitempty"`
}

// NewMediaFileObject instantiates a new MediaFileObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaFileObject() *MediaFileObject {
	this := MediaFileObject{}
	return &this
}

// NewMediaFileObjectWithDefaults instantiates a new MediaFileObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaFileObjectWithDefaults() *MediaFileObject {
	this := MediaFileObject{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MediaFileObject) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFileObject) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MediaFileObject) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MediaFileObject) SetId(v int32) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MediaFileObject) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFileObject) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MediaFileObject) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MediaFileObject) SetUuid(v string) {
	o.Uuid = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *MediaFileObject) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFileObject) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *MediaFileObject) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *MediaFileObject) SetFilename(v string) {
	o.Filename = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MediaFileObject) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFileObject) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MediaFileObject) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *MediaFileObject) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetThumbUrl returns the ThumbUrl field value if set, zero value otherwise.
func (o *MediaFileObject) GetThumbUrl() string {
	if o == nil || IsNil(o.ThumbUrl) {
		var ret string
		return ret
	}
	return *o.ThumbUrl
}

// GetThumbUrlOk returns a tuple with the ThumbUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFileObject) GetThumbUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbUrl) {
		return nil, false
	}
	return o.ThumbUrl, true
}

// HasThumbUrl returns a boolean if a field has been set.
func (o *MediaFileObject) HasThumbUrl() bool {
	if o != nil && !IsNil(o.ThumbUrl) {
		return true
	}

	return false
}

// SetThumbUrl gets a reference to the given string and assigns it to the ThumbUrl field.
func (o *MediaFileObject) SetThumbUrl(v string) {
	o.ThumbUrl = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *MediaFileObject) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFileObject) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *MediaFileObject) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *MediaFileObject) SetUri(v string) {
	o.Uri = &v
}

func (o MediaFileObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaFileObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ThumbUrl) {
		toSerialize["thumb_url"] = o.ThumbUrl
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableMediaFileObject struct {
	value *MediaFileObject
	isSet bool
}

func (v NullableMediaFileObject) Get() *MediaFileObject {
	return v.value
}

func (v *NullableMediaFileObject) Set(val *MediaFileObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaFileObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaFileObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaFileObject(val *MediaFileObject) *NullableMediaFileObject {
	return &NullableMediaFileObject{value: val, isSet: true}
}

func (v NullableMediaFileObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaFileObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


